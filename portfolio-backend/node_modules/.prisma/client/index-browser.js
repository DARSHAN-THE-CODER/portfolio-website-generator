
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.11.0
 * Query Engine version: 8fde8fef4033376662cad983758335009d522acb
 */
Prisma.prismaVersion = {
  client: "4.11.0",
  engine: "8fde8fef4033376662cad983758335009d522acb"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val


/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.AboutScalarFieldEnum = makeEnum({
  id: 'id',
  username: 'username',
  title: 'title',
  description: 'description'
});

exports.Prisma.ContactFormResponsesScalarFieldEnum = makeEnum({
  id: 'id',
  username: 'username',
  senderName: 'senderName',
  senderMail: 'senderMail',
  message: 'message',
  date: 'date'
});

exports.Prisma.EducationScalarFieldEnum = makeEnum({
  id: 'id',
  username: 'username',
  priority: 'priority',
  from: 'from',
  to: 'to',
  institution: 'institution',
  description: 'description',
  percentage: 'percentage'
});

exports.Prisma.ExperienceScalarFieldEnum = makeEnum({
  id: 'id',
  username: 'username',
  role: 'role',
  company: 'company',
  from: 'from',
  to: 'to',
  priority: 'priority',
  description: 'description'
});

exports.Prisma.ProjectsScalarFieldEnum = makeEnum({
  id: 'id',
  username: 'username',
  name: 'name',
  description: 'description',
  liveLink: 'liveLink',
  github: 'github',
  category: 'category',
  date: 'date',
  thumbnail: 'thumbnail',
  techUsed: 'techUsed'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});

exports.Prisma.SkillsScalarFieldEnum = makeEnum({
  id: 'id',
  username: 'username',
  title: 'title',
  percentage: 'percentage'
});

exports.Prisma.SocialLinksScalarFieldEnum = makeEnum({
  id: 'id',
  username: 'username',
  linkName: 'linkName',
  url: 'url'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  email: 'email',
  username: 'username',
  name: 'name',
  password: 'password',
  address: 'address',
  photoURL: 'photoURL',
  gender: 'gender',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  shortDesc: 'shortDesc',
  about: 'about',
  phone: 'phone'
});


exports.Prisma.ModelName = makeEnum({
  User: 'User',
  SocialLinks: 'SocialLinks',
  Projects: 'Projects',
  Education: 'Education',
  Experience: 'Experience',
  About: 'About',
  Skills: 'Skills',
  ContactFormResponses: 'ContactFormResponses'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
