
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 * 
 */
export type User = {
  id: number
  email: string
  username: string
  name: string | null
  password: string
  address: string | null
  photoURL: string | null
  gender: string | null
  createdAt: Date
  updatedAt: Date
  shortDesc: string | null
  about: string | null
  phone: string | null
}

/**
 * Model SocialLinks
 * 
 */
export type SocialLinks = {
  id: number
  username: string
  linkName: string
  url: string
}

/**
 * Model Projects
 * 
 */
export type Projects = {
  id: number
  username: string | null
  name: string
  description: string
  liveLink: string
  github: string
  category: string
  date: Date
  thumbnail: string
  techUsed: string[]
}

/**
 * Model Education
 * 
 */
export type Education = {
  id: number
  username: string | null
  priority: number
  from: string
  to: string
  institution: string
  description: string
  percentage: string
}

/**
 * Model Experience
 * 
 */
export type Experience = {
  id: number
  username: string
  role: string
  company: string
  from: string
  to: string
  priority: number
  description: string
}

/**
 * Model About
 * 
 */
export type About = {
  id: number
  username: string
  title: string
  description: string
}

/**
 * Model Skills
 * 
 */
export type Skills = {
  id: number
  username: string
  title: string
  percentage: string
}

/**
 * Model ContactFormResponses
 * 
 */
export type ContactFormResponses = {
  id: number
  username: string
  senderName: string
  senderMail: string
  message: string
  date: Date
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.socialLinks`: Exposes CRUD operations for the **SocialLinks** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SocialLinks
    * const socialLinks = await prisma.socialLinks.findMany()
    * ```
    */
  get socialLinks(): Prisma.SocialLinksDelegate<GlobalReject>;

  /**
   * `prisma.projects`: Exposes CRUD operations for the **Projects** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Projects
    * const projects = await prisma.projects.findMany()
    * ```
    */
  get projects(): Prisma.ProjectsDelegate<GlobalReject>;

  /**
   * `prisma.education`: Exposes CRUD operations for the **Education** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Educations
    * const educations = await prisma.education.findMany()
    * ```
    */
  get education(): Prisma.EducationDelegate<GlobalReject>;

  /**
   * `prisma.experience`: Exposes CRUD operations for the **Experience** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Experiences
    * const experiences = await prisma.experience.findMany()
    * ```
    */
  get experience(): Prisma.ExperienceDelegate<GlobalReject>;

  /**
   * `prisma.about`: Exposes CRUD operations for the **About** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Abouts
    * const abouts = await prisma.about.findMany()
    * ```
    */
  get about(): Prisma.AboutDelegate<GlobalReject>;

  /**
   * `prisma.skills`: Exposes CRUD operations for the **Skills** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Skills
    * const skills = await prisma.skills.findMany()
    * ```
    */
  get skills(): Prisma.SkillsDelegate<GlobalReject>;

  /**
   * `prisma.contactFormResponses`: Exposes CRUD operations for the **ContactFormResponses** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ContactFormResponses
    * const contactFormResponses = await prisma.contactFormResponses.findMany()
    * ```
    */
  get contactFormResponses(): Prisma.ContactFormResponsesDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.11.0
   * Query Engine version: 8fde8fef4033376662cad983758335009d522acb
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    SocialLinks: 'SocialLinks',
    Projects: 'Projects',
    Education: 'Education',
    Experience: 'Experience',
    About: 'About',
    Skills: 'Skills',
    ContactFormResponses: 'ContactFormResponses'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    socialLinks: number
    projects: number
    education: number
    experience: number
    aboutCards: number
    skills: number
    contactResponses: number
  }

  export type UserCountOutputTypeSelect = {
    socialLinks?: boolean
    projects?: boolean
    education?: boolean
    experience?: boolean
    aboutCards?: boolean
    skills?: boolean
    contactResponses?: boolean
  }

  export type UserCountOutputTypeGetPayload<S extends boolean | null | undefined | UserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UserCountOutputTypeArgs)
    ? UserCountOutputType 
    : S extends { select: any } & (UserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
      : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    username: string | null
    name: string | null
    password: string | null
    address: string | null
    photoURL: string | null
    gender: string | null
    createdAt: Date | null
    updatedAt: Date | null
    shortDesc: string | null
    about: string | null
    phone: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    username: string | null
    name: string | null
    password: string | null
    address: string | null
    photoURL: string | null
    gender: string | null
    createdAt: Date | null
    updatedAt: Date | null
    shortDesc: string | null
    about: string | null
    phone: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    username: number
    name: number
    password: number
    address: number
    photoURL: number
    gender: number
    createdAt: number
    updatedAt: number
    shortDesc: number
    about: number
    phone: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    username?: true
    name?: true
    password?: true
    address?: true
    photoURL?: true
    gender?: true
    createdAt?: true
    updatedAt?: true
    shortDesc?: true
    about?: true
    phone?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    username?: true
    name?: true
    password?: true
    address?: true
    photoURL?: true
    gender?: true
    createdAt?: true
    updatedAt?: true
    shortDesc?: true
    about?: true
    phone?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    username?: true
    name?: true
    password?: true
    address?: true
    photoURL?: true
    gender?: true
    createdAt?: true
    updatedAt?: true
    shortDesc?: true
    about?: true
    phone?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    email: string
    username: string
    name: string | null
    password: string
    address: string | null
    photoURL: string | null
    gender: string | null
    createdAt: Date
    updatedAt: Date
    shortDesc: string | null
    about: string | null
    phone: string | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    email?: boolean
    username?: boolean
    name?: boolean
    password?: boolean
    address?: boolean
    photoURL?: boolean
    gender?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    shortDesc?: boolean
    about?: boolean
    phone?: boolean
    socialLinks?: boolean | User$socialLinksArgs
    projects?: boolean | User$projectsArgs
    education?: boolean | User$educationArgs
    experience?: boolean | User$experienceArgs
    aboutCards?: boolean | User$aboutCardsArgs
    skills?: boolean | User$skillsArgs
    contactResponses?: boolean | User$contactResponsesArgs
    _count?: boolean | UserCountOutputTypeArgs
  }


  export type UserInclude = {
    socialLinks?: boolean | User$socialLinksArgs
    projects?: boolean | User$projectsArgs
    education?: boolean | User$educationArgs
    experience?: boolean | User$experienceArgs
    aboutCards?: boolean | User$aboutCardsArgs
    skills?: boolean | User$skillsArgs
    contactResponses?: boolean | User$contactResponsesArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<S extends boolean | null | undefined | UserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'socialLinks' ? Array < SocialLinksGetPayload<S['include'][P]>>  :
        P extends 'projects' ? Array < ProjectsGetPayload<S['include'][P]>>  :
        P extends 'education' ? Array < EducationGetPayload<S['include'][P]>>  :
        P extends 'experience' ? Array < ExperienceGetPayload<S['include'][P]>>  :
        P extends 'aboutCards' ? Array < AboutGetPayload<S['include'][P]>>  :
        P extends 'skills' ? Array < SkillsGetPayload<S['include'][P]>>  :
        P extends 'contactResponses' ? Array < ContactFormResponsesGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'socialLinks' ? Array < SocialLinksGetPayload<S['select'][P]>>  :
        P extends 'projects' ? Array < ProjectsGetPayload<S['select'][P]>>  :
        P extends 'education' ? Array < EducationGetPayload<S['select'][P]>>  :
        P extends 'experience' ? Array < ExperienceGetPayload<S['select'][P]>>  :
        P extends 'aboutCards' ? Array < AboutGetPayload<S['select'][P]>>  :
        P extends 'skills' ? Array < SkillsGetPayload<S['select'][P]>>  :
        P extends 'contactResponses' ? Array < ContactFormResponsesGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): Prisma.PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    socialLinks<T extends User$socialLinksArgs= {}>(args?: Subset<T, User$socialLinksArgs>): Prisma.PrismaPromise<Array<SocialLinksGetPayload<T>>| Null>;

    projects<T extends User$projectsArgs= {}>(args?: Subset<T, User$projectsArgs>): Prisma.PrismaPromise<Array<ProjectsGetPayload<T>>| Null>;

    education<T extends User$educationArgs= {}>(args?: Subset<T, User$educationArgs>): Prisma.PrismaPromise<Array<EducationGetPayload<T>>| Null>;

    experience<T extends User$experienceArgs= {}>(args?: Subset<T, User$experienceArgs>): Prisma.PrismaPromise<Array<ExperienceGetPayload<T>>| Null>;

    aboutCards<T extends User$aboutCardsArgs= {}>(args?: Subset<T, User$aboutCardsArgs>): Prisma.PrismaPromise<Array<AboutGetPayload<T>>| Null>;

    skills<T extends User$skillsArgs= {}>(args?: Subset<T, User$skillsArgs>): Prisma.PrismaPromise<Array<SkillsGetPayload<T>>| Null>;

    contactResponses<T extends User$contactResponsesArgs= {}>(args?: Subset<T, User$contactResponsesArgs>): Prisma.PrismaPromise<Array<ContactFormResponsesGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.socialLinks
   */
  export type User$socialLinksArgs = {
    /**
     * Select specific fields to fetch from the SocialLinks
     */
    select?: SocialLinksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SocialLinksInclude | null
    where?: SocialLinksWhereInput
    orderBy?: Enumerable<SocialLinksOrderByWithRelationInput>
    cursor?: SocialLinksWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SocialLinksScalarFieldEnum>
  }


  /**
   * User.projects
   */
  export type User$projectsArgs = {
    /**
     * Select specific fields to fetch from the Projects
     */
    select?: ProjectsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectsInclude | null
    where?: ProjectsWhereInput
    orderBy?: Enumerable<ProjectsOrderByWithRelationInput>
    cursor?: ProjectsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ProjectsScalarFieldEnum>
  }


  /**
   * User.education
   */
  export type User$educationArgs = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EducationInclude | null
    where?: EducationWhereInput
    orderBy?: Enumerable<EducationOrderByWithRelationInput>
    cursor?: EducationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<EducationScalarFieldEnum>
  }


  /**
   * User.experience
   */
  export type User$experienceArgs = {
    /**
     * Select specific fields to fetch from the Experience
     */
    select?: ExperienceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExperienceInclude | null
    where?: ExperienceWhereInput
    orderBy?: Enumerable<ExperienceOrderByWithRelationInput>
    cursor?: ExperienceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ExperienceScalarFieldEnum>
  }


  /**
   * User.aboutCards
   */
  export type User$aboutCardsArgs = {
    /**
     * Select specific fields to fetch from the About
     */
    select?: AboutSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AboutInclude | null
    where?: AboutWhereInput
    orderBy?: Enumerable<AboutOrderByWithRelationInput>
    cursor?: AboutWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AboutScalarFieldEnum>
  }


  /**
   * User.skills
   */
  export type User$skillsArgs = {
    /**
     * Select specific fields to fetch from the Skills
     */
    select?: SkillsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SkillsInclude | null
    where?: SkillsWhereInput
    orderBy?: Enumerable<SkillsOrderByWithRelationInput>
    cursor?: SkillsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SkillsScalarFieldEnum>
  }


  /**
   * User.contactResponses
   */
  export type User$contactResponsesArgs = {
    /**
     * Select specific fields to fetch from the ContactFormResponses
     */
    select?: ContactFormResponsesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContactFormResponsesInclude | null
    where?: ContactFormResponsesWhereInput
    orderBy?: Enumerable<ContactFormResponsesOrderByWithRelationInput>
    cursor?: ContactFormResponsesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ContactFormResponsesScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
  }



  /**
   * Model SocialLinks
   */


  export type AggregateSocialLinks = {
    _count: SocialLinksCountAggregateOutputType | null
    _avg: SocialLinksAvgAggregateOutputType | null
    _sum: SocialLinksSumAggregateOutputType | null
    _min: SocialLinksMinAggregateOutputType | null
    _max: SocialLinksMaxAggregateOutputType | null
  }

  export type SocialLinksAvgAggregateOutputType = {
    id: number | null
  }

  export type SocialLinksSumAggregateOutputType = {
    id: number | null
  }

  export type SocialLinksMinAggregateOutputType = {
    id: number | null
    username: string | null
    linkName: string | null
    url: string | null
  }

  export type SocialLinksMaxAggregateOutputType = {
    id: number | null
    username: string | null
    linkName: string | null
    url: string | null
  }

  export type SocialLinksCountAggregateOutputType = {
    id: number
    username: number
    linkName: number
    url: number
    _all: number
  }


  export type SocialLinksAvgAggregateInputType = {
    id?: true
  }

  export type SocialLinksSumAggregateInputType = {
    id?: true
  }

  export type SocialLinksMinAggregateInputType = {
    id?: true
    username?: true
    linkName?: true
    url?: true
  }

  export type SocialLinksMaxAggregateInputType = {
    id?: true
    username?: true
    linkName?: true
    url?: true
  }

  export type SocialLinksCountAggregateInputType = {
    id?: true
    username?: true
    linkName?: true
    url?: true
    _all?: true
  }

  export type SocialLinksAggregateArgs = {
    /**
     * Filter which SocialLinks to aggregate.
     */
    where?: SocialLinksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SocialLinks to fetch.
     */
    orderBy?: Enumerable<SocialLinksOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SocialLinksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SocialLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SocialLinks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SocialLinks
    **/
    _count?: true | SocialLinksCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SocialLinksAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SocialLinksSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SocialLinksMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SocialLinksMaxAggregateInputType
  }

  export type GetSocialLinksAggregateType<T extends SocialLinksAggregateArgs> = {
        [P in keyof T & keyof AggregateSocialLinks]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSocialLinks[P]>
      : GetScalarType<T[P], AggregateSocialLinks[P]>
  }




  export type SocialLinksGroupByArgs = {
    where?: SocialLinksWhereInput
    orderBy?: Enumerable<SocialLinksOrderByWithAggregationInput>
    by: SocialLinksScalarFieldEnum[]
    having?: SocialLinksScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SocialLinksCountAggregateInputType | true
    _avg?: SocialLinksAvgAggregateInputType
    _sum?: SocialLinksSumAggregateInputType
    _min?: SocialLinksMinAggregateInputType
    _max?: SocialLinksMaxAggregateInputType
  }


  export type SocialLinksGroupByOutputType = {
    id: number
    username: string
    linkName: string
    url: string
    _count: SocialLinksCountAggregateOutputType | null
    _avg: SocialLinksAvgAggregateOutputType | null
    _sum: SocialLinksSumAggregateOutputType | null
    _min: SocialLinksMinAggregateOutputType | null
    _max: SocialLinksMaxAggregateOutputType | null
  }

  type GetSocialLinksGroupByPayload<T extends SocialLinksGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<SocialLinksGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SocialLinksGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SocialLinksGroupByOutputType[P]>
            : GetScalarType<T[P], SocialLinksGroupByOutputType[P]>
        }
      >
    >


  export type SocialLinksSelect = {
    id?: boolean
    username?: boolean
    linkName?: boolean
    url?: boolean
    user?: boolean | UserArgs
  }


  export type SocialLinksInclude = {
    user?: boolean | UserArgs
  }

  export type SocialLinksGetPayload<S extends boolean | null | undefined | SocialLinksArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? SocialLinks :
    S extends undefined ? never :
    S extends { include: any } & (SocialLinksArgs | SocialLinksFindManyArgs)
    ? SocialLinks  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (SocialLinksArgs | SocialLinksFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> | null :  P extends keyof SocialLinks ? SocialLinks[P] : never
  } 
      : SocialLinks


  type SocialLinksCountArgs = 
    Omit<SocialLinksFindManyArgs, 'select' | 'include'> & {
      select?: SocialLinksCountAggregateInputType | true
    }

  export interface SocialLinksDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one SocialLinks that matches the filter.
     * @param {SocialLinksFindUniqueArgs} args - Arguments to find a SocialLinks
     * @example
     * // Get one SocialLinks
     * const socialLinks = await prisma.socialLinks.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SocialLinksFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SocialLinksFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'SocialLinks'> extends True ? Prisma__SocialLinksClient<SocialLinksGetPayload<T>> : Prisma__SocialLinksClient<SocialLinksGetPayload<T> | null, null>

    /**
     * Find one SocialLinks that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SocialLinksFindUniqueOrThrowArgs} args - Arguments to find a SocialLinks
     * @example
     * // Get one SocialLinks
     * const socialLinks = await prisma.socialLinks.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SocialLinksFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SocialLinksFindUniqueOrThrowArgs>
    ): Prisma__SocialLinksClient<SocialLinksGetPayload<T>>

    /**
     * Find the first SocialLinks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialLinksFindFirstArgs} args - Arguments to find a SocialLinks
     * @example
     * // Get one SocialLinks
     * const socialLinks = await prisma.socialLinks.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SocialLinksFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SocialLinksFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'SocialLinks'> extends True ? Prisma__SocialLinksClient<SocialLinksGetPayload<T>> : Prisma__SocialLinksClient<SocialLinksGetPayload<T> | null, null>

    /**
     * Find the first SocialLinks that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialLinksFindFirstOrThrowArgs} args - Arguments to find a SocialLinks
     * @example
     * // Get one SocialLinks
     * const socialLinks = await prisma.socialLinks.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SocialLinksFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SocialLinksFindFirstOrThrowArgs>
    ): Prisma__SocialLinksClient<SocialLinksGetPayload<T>>

    /**
     * Find zero or more SocialLinks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialLinksFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SocialLinks
     * const socialLinks = await prisma.socialLinks.findMany()
     * 
     * // Get first 10 SocialLinks
     * const socialLinks = await prisma.socialLinks.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const socialLinksWithIdOnly = await prisma.socialLinks.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SocialLinksFindManyArgs>(
      args?: SelectSubset<T, SocialLinksFindManyArgs>
    ): Prisma.PrismaPromise<Array<SocialLinksGetPayload<T>>>

    /**
     * Create a SocialLinks.
     * @param {SocialLinksCreateArgs} args - Arguments to create a SocialLinks.
     * @example
     * // Create one SocialLinks
     * const SocialLinks = await prisma.socialLinks.create({
     *   data: {
     *     // ... data to create a SocialLinks
     *   }
     * })
     * 
    **/
    create<T extends SocialLinksCreateArgs>(
      args: SelectSubset<T, SocialLinksCreateArgs>
    ): Prisma__SocialLinksClient<SocialLinksGetPayload<T>>

    /**
     * Create many SocialLinks.
     *     @param {SocialLinksCreateManyArgs} args - Arguments to create many SocialLinks.
     *     @example
     *     // Create many SocialLinks
     *     const socialLinks = await prisma.socialLinks.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SocialLinksCreateManyArgs>(
      args?: SelectSubset<T, SocialLinksCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SocialLinks.
     * @param {SocialLinksDeleteArgs} args - Arguments to delete one SocialLinks.
     * @example
     * // Delete one SocialLinks
     * const SocialLinks = await prisma.socialLinks.delete({
     *   where: {
     *     // ... filter to delete one SocialLinks
     *   }
     * })
     * 
    **/
    delete<T extends SocialLinksDeleteArgs>(
      args: SelectSubset<T, SocialLinksDeleteArgs>
    ): Prisma__SocialLinksClient<SocialLinksGetPayload<T>>

    /**
     * Update one SocialLinks.
     * @param {SocialLinksUpdateArgs} args - Arguments to update one SocialLinks.
     * @example
     * // Update one SocialLinks
     * const socialLinks = await prisma.socialLinks.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SocialLinksUpdateArgs>(
      args: SelectSubset<T, SocialLinksUpdateArgs>
    ): Prisma__SocialLinksClient<SocialLinksGetPayload<T>>

    /**
     * Delete zero or more SocialLinks.
     * @param {SocialLinksDeleteManyArgs} args - Arguments to filter SocialLinks to delete.
     * @example
     * // Delete a few SocialLinks
     * const { count } = await prisma.socialLinks.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SocialLinksDeleteManyArgs>(
      args?: SelectSubset<T, SocialLinksDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SocialLinks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialLinksUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SocialLinks
     * const socialLinks = await prisma.socialLinks.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SocialLinksUpdateManyArgs>(
      args: SelectSubset<T, SocialLinksUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SocialLinks.
     * @param {SocialLinksUpsertArgs} args - Arguments to update or create a SocialLinks.
     * @example
     * // Update or create a SocialLinks
     * const socialLinks = await prisma.socialLinks.upsert({
     *   create: {
     *     // ... data to create a SocialLinks
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SocialLinks we want to update
     *   }
     * })
    **/
    upsert<T extends SocialLinksUpsertArgs>(
      args: SelectSubset<T, SocialLinksUpsertArgs>
    ): Prisma__SocialLinksClient<SocialLinksGetPayload<T>>

    /**
     * Count the number of SocialLinks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialLinksCountArgs} args - Arguments to filter SocialLinks to count.
     * @example
     * // Count the number of SocialLinks
     * const count = await prisma.socialLinks.count({
     *   where: {
     *     // ... the filter for the SocialLinks we want to count
     *   }
     * })
    **/
    count<T extends SocialLinksCountArgs>(
      args?: Subset<T, SocialLinksCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SocialLinksCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SocialLinks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialLinksAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SocialLinksAggregateArgs>(args: Subset<T, SocialLinksAggregateArgs>): Prisma.PrismaPromise<GetSocialLinksAggregateType<T>>

    /**
     * Group by SocialLinks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialLinksGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SocialLinksGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SocialLinksGroupByArgs['orderBy'] }
        : { orderBy?: SocialLinksGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SocialLinksGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSocialLinksGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for SocialLinks.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SocialLinksClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * SocialLinks base type for findUnique actions
   */
  export type SocialLinksFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the SocialLinks
     */
    select?: SocialLinksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SocialLinksInclude | null
    /**
     * Filter, which SocialLinks to fetch.
     */
    where: SocialLinksWhereUniqueInput
  }

  /**
   * SocialLinks findUnique
   */
  export interface SocialLinksFindUniqueArgs extends SocialLinksFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * SocialLinks findUniqueOrThrow
   */
  export type SocialLinksFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the SocialLinks
     */
    select?: SocialLinksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SocialLinksInclude | null
    /**
     * Filter, which SocialLinks to fetch.
     */
    where: SocialLinksWhereUniqueInput
  }


  /**
   * SocialLinks base type for findFirst actions
   */
  export type SocialLinksFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the SocialLinks
     */
    select?: SocialLinksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SocialLinksInclude | null
    /**
     * Filter, which SocialLinks to fetch.
     */
    where?: SocialLinksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SocialLinks to fetch.
     */
    orderBy?: Enumerable<SocialLinksOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SocialLinks.
     */
    cursor?: SocialLinksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SocialLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SocialLinks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SocialLinks.
     */
    distinct?: Enumerable<SocialLinksScalarFieldEnum>
  }

  /**
   * SocialLinks findFirst
   */
  export interface SocialLinksFindFirstArgs extends SocialLinksFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * SocialLinks findFirstOrThrow
   */
  export type SocialLinksFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the SocialLinks
     */
    select?: SocialLinksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SocialLinksInclude | null
    /**
     * Filter, which SocialLinks to fetch.
     */
    where?: SocialLinksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SocialLinks to fetch.
     */
    orderBy?: Enumerable<SocialLinksOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SocialLinks.
     */
    cursor?: SocialLinksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SocialLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SocialLinks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SocialLinks.
     */
    distinct?: Enumerable<SocialLinksScalarFieldEnum>
  }


  /**
   * SocialLinks findMany
   */
  export type SocialLinksFindManyArgs = {
    /**
     * Select specific fields to fetch from the SocialLinks
     */
    select?: SocialLinksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SocialLinksInclude | null
    /**
     * Filter, which SocialLinks to fetch.
     */
    where?: SocialLinksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SocialLinks to fetch.
     */
    orderBy?: Enumerable<SocialLinksOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SocialLinks.
     */
    cursor?: SocialLinksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SocialLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SocialLinks.
     */
    skip?: number
    distinct?: Enumerable<SocialLinksScalarFieldEnum>
  }


  /**
   * SocialLinks create
   */
  export type SocialLinksCreateArgs = {
    /**
     * Select specific fields to fetch from the SocialLinks
     */
    select?: SocialLinksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SocialLinksInclude | null
    /**
     * The data needed to create a SocialLinks.
     */
    data: XOR<SocialLinksCreateInput, SocialLinksUncheckedCreateInput>
  }


  /**
   * SocialLinks createMany
   */
  export type SocialLinksCreateManyArgs = {
    /**
     * The data used to create many SocialLinks.
     */
    data: Enumerable<SocialLinksCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * SocialLinks update
   */
  export type SocialLinksUpdateArgs = {
    /**
     * Select specific fields to fetch from the SocialLinks
     */
    select?: SocialLinksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SocialLinksInclude | null
    /**
     * The data needed to update a SocialLinks.
     */
    data: XOR<SocialLinksUpdateInput, SocialLinksUncheckedUpdateInput>
    /**
     * Choose, which SocialLinks to update.
     */
    where: SocialLinksWhereUniqueInput
  }


  /**
   * SocialLinks updateMany
   */
  export type SocialLinksUpdateManyArgs = {
    /**
     * The data used to update SocialLinks.
     */
    data: XOR<SocialLinksUpdateManyMutationInput, SocialLinksUncheckedUpdateManyInput>
    /**
     * Filter which SocialLinks to update
     */
    where?: SocialLinksWhereInput
  }


  /**
   * SocialLinks upsert
   */
  export type SocialLinksUpsertArgs = {
    /**
     * Select specific fields to fetch from the SocialLinks
     */
    select?: SocialLinksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SocialLinksInclude | null
    /**
     * The filter to search for the SocialLinks to update in case it exists.
     */
    where: SocialLinksWhereUniqueInput
    /**
     * In case the SocialLinks found by the `where` argument doesn't exist, create a new SocialLinks with this data.
     */
    create: XOR<SocialLinksCreateInput, SocialLinksUncheckedCreateInput>
    /**
     * In case the SocialLinks was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SocialLinksUpdateInput, SocialLinksUncheckedUpdateInput>
  }


  /**
   * SocialLinks delete
   */
  export type SocialLinksDeleteArgs = {
    /**
     * Select specific fields to fetch from the SocialLinks
     */
    select?: SocialLinksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SocialLinksInclude | null
    /**
     * Filter which SocialLinks to delete.
     */
    where: SocialLinksWhereUniqueInput
  }


  /**
   * SocialLinks deleteMany
   */
  export type SocialLinksDeleteManyArgs = {
    /**
     * Filter which SocialLinks to delete
     */
    where?: SocialLinksWhereInput
  }


  /**
   * SocialLinks without action
   */
  export type SocialLinksArgs = {
    /**
     * Select specific fields to fetch from the SocialLinks
     */
    select?: SocialLinksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SocialLinksInclude | null
  }



  /**
   * Model Projects
   */


  export type AggregateProjects = {
    _count: ProjectsCountAggregateOutputType | null
    _avg: ProjectsAvgAggregateOutputType | null
    _sum: ProjectsSumAggregateOutputType | null
    _min: ProjectsMinAggregateOutputType | null
    _max: ProjectsMaxAggregateOutputType | null
  }

  export type ProjectsAvgAggregateOutputType = {
    id: number | null
  }

  export type ProjectsSumAggregateOutputType = {
    id: number | null
  }

  export type ProjectsMinAggregateOutputType = {
    id: number | null
    username: string | null
    name: string | null
    description: string | null
    liveLink: string | null
    github: string | null
    category: string | null
    date: Date | null
    thumbnail: string | null
  }

  export type ProjectsMaxAggregateOutputType = {
    id: number | null
    username: string | null
    name: string | null
    description: string | null
    liveLink: string | null
    github: string | null
    category: string | null
    date: Date | null
    thumbnail: string | null
  }

  export type ProjectsCountAggregateOutputType = {
    id: number
    username: number
    name: number
    description: number
    liveLink: number
    github: number
    category: number
    date: number
    thumbnail: number
    techUsed: number
    _all: number
  }


  export type ProjectsAvgAggregateInputType = {
    id?: true
  }

  export type ProjectsSumAggregateInputType = {
    id?: true
  }

  export type ProjectsMinAggregateInputType = {
    id?: true
    username?: true
    name?: true
    description?: true
    liveLink?: true
    github?: true
    category?: true
    date?: true
    thumbnail?: true
  }

  export type ProjectsMaxAggregateInputType = {
    id?: true
    username?: true
    name?: true
    description?: true
    liveLink?: true
    github?: true
    category?: true
    date?: true
    thumbnail?: true
  }

  export type ProjectsCountAggregateInputType = {
    id?: true
    username?: true
    name?: true
    description?: true
    liveLink?: true
    github?: true
    category?: true
    date?: true
    thumbnail?: true
    techUsed?: true
    _all?: true
  }

  export type ProjectsAggregateArgs = {
    /**
     * Filter which Projects to aggregate.
     */
    where?: ProjectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: Enumerable<ProjectsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Projects
    **/
    _count?: true | ProjectsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProjectsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProjectsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectsMaxAggregateInputType
  }

  export type GetProjectsAggregateType<T extends ProjectsAggregateArgs> = {
        [P in keyof T & keyof AggregateProjects]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProjects[P]>
      : GetScalarType<T[P], AggregateProjects[P]>
  }




  export type ProjectsGroupByArgs = {
    where?: ProjectsWhereInput
    orderBy?: Enumerable<ProjectsOrderByWithAggregationInput>
    by: ProjectsScalarFieldEnum[]
    having?: ProjectsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectsCountAggregateInputType | true
    _avg?: ProjectsAvgAggregateInputType
    _sum?: ProjectsSumAggregateInputType
    _min?: ProjectsMinAggregateInputType
    _max?: ProjectsMaxAggregateInputType
  }


  export type ProjectsGroupByOutputType = {
    id: number
    username: string | null
    name: string
    description: string
    liveLink: string
    github: string
    category: string
    date: Date
    thumbnail: string
    techUsed: string[]
    _count: ProjectsCountAggregateOutputType | null
    _avg: ProjectsAvgAggregateOutputType | null
    _sum: ProjectsSumAggregateOutputType | null
    _min: ProjectsMinAggregateOutputType | null
    _max: ProjectsMaxAggregateOutputType | null
  }

  type GetProjectsGroupByPayload<T extends ProjectsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ProjectsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectsGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectsGroupByOutputType[P]>
        }
      >
    >


  export type ProjectsSelect = {
    id?: boolean
    username?: boolean
    name?: boolean
    description?: boolean
    liveLink?: boolean
    github?: boolean
    category?: boolean
    date?: boolean
    thumbnail?: boolean
    techUsed?: boolean
    user?: boolean | UserArgs
  }


  export type ProjectsInclude = {
    user?: boolean | UserArgs
  }

  export type ProjectsGetPayload<S extends boolean | null | undefined | ProjectsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Projects :
    S extends undefined ? never :
    S extends { include: any } & (ProjectsArgs | ProjectsFindManyArgs)
    ? Projects  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (ProjectsArgs | ProjectsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> | null :  P extends keyof Projects ? Projects[P] : never
  } 
      : Projects


  type ProjectsCountArgs = 
    Omit<ProjectsFindManyArgs, 'select' | 'include'> & {
      select?: ProjectsCountAggregateInputType | true
    }

  export interface ProjectsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Projects that matches the filter.
     * @param {ProjectsFindUniqueArgs} args - Arguments to find a Projects
     * @example
     * // Get one Projects
     * const projects = await prisma.projects.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProjectsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProjectsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Projects'> extends True ? Prisma__ProjectsClient<ProjectsGetPayload<T>> : Prisma__ProjectsClient<ProjectsGetPayload<T> | null, null>

    /**
     * Find one Projects that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProjectsFindUniqueOrThrowArgs} args - Arguments to find a Projects
     * @example
     * // Get one Projects
     * const projects = await prisma.projects.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProjectsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ProjectsFindUniqueOrThrowArgs>
    ): Prisma__ProjectsClient<ProjectsGetPayload<T>>

    /**
     * Find the first Projects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectsFindFirstArgs} args - Arguments to find a Projects
     * @example
     * // Get one Projects
     * const projects = await prisma.projects.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProjectsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProjectsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Projects'> extends True ? Prisma__ProjectsClient<ProjectsGetPayload<T>> : Prisma__ProjectsClient<ProjectsGetPayload<T> | null, null>

    /**
     * Find the first Projects that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectsFindFirstOrThrowArgs} args - Arguments to find a Projects
     * @example
     * // Get one Projects
     * const projects = await prisma.projects.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProjectsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ProjectsFindFirstOrThrowArgs>
    ): Prisma__ProjectsClient<ProjectsGetPayload<T>>

    /**
     * Find zero or more Projects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Projects
     * const projects = await prisma.projects.findMany()
     * 
     * // Get first 10 Projects
     * const projects = await prisma.projects.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectsWithIdOnly = await prisma.projects.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProjectsFindManyArgs>(
      args?: SelectSubset<T, ProjectsFindManyArgs>
    ): Prisma.PrismaPromise<Array<ProjectsGetPayload<T>>>

    /**
     * Create a Projects.
     * @param {ProjectsCreateArgs} args - Arguments to create a Projects.
     * @example
     * // Create one Projects
     * const Projects = await prisma.projects.create({
     *   data: {
     *     // ... data to create a Projects
     *   }
     * })
     * 
    **/
    create<T extends ProjectsCreateArgs>(
      args: SelectSubset<T, ProjectsCreateArgs>
    ): Prisma__ProjectsClient<ProjectsGetPayload<T>>

    /**
     * Create many Projects.
     *     @param {ProjectsCreateManyArgs} args - Arguments to create many Projects.
     *     @example
     *     // Create many Projects
     *     const projects = await prisma.projects.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProjectsCreateManyArgs>(
      args?: SelectSubset<T, ProjectsCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Projects.
     * @param {ProjectsDeleteArgs} args - Arguments to delete one Projects.
     * @example
     * // Delete one Projects
     * const Projects = await prisma.projects.delete({
     *   where: {
     *     // ... filter to delete one Projects
     *   }
     * })
     * 
    **/
    delete<T extends ProjectsDeleteArgs>(
      args: SelectSubset<T, ProjectsDeleteArgs>
    ): Prisma__ProjectsClient<ProjectsGetPayload<T>>

    /**
     * Update one Projects.
     * @param {ProjectsUpdateArgs} args - Arguments to update one Projects.
     * @example
     * // Update one Projects
     * const projects = await prisma.projects.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProjectsUpdateArgs>(
      args: SelectSubset<T, ProjectsUpdateArgs>
    ): Prisma__ProjectsClient<ProjectsGetPayload<T>>

    /**
     * Delete zero or more Projects.
     * @param {ProjectsDeleteManyArgs} args - Arguments to filter Projects to delete.
     * @example
     * // Delete a few Projects
     * const { count } = await prisma.projects.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProjectsDeleteManyArgs>(
      args?: SelectSubset<T, ProjectsDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Projects
     * const projects = await prisma.projects.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProjectsUpdateManyArgs>(
      args: SelectSubset<T, ProjectsUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Projects.
     * @param {ProjectsUpsertArgs} args - Arguments to update or create a Projects.
     * @example
     * // Update or create a Projects
     * const projects = await prisma.projects.upsert({
     *   create: {
     *     // ... data to create a Projects
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Projects we want to update
     *   }
     * })
    **/
    upsert<T extends ProjectsUpsertArgs>(
      args: SelectSubset<T, ProjectsUpsertArgs>
    ): Prisma__ProjectsClient<ProjectsGetPayload<T>>

    /**
     * Count the number of Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectsCountArgs} args - Arguments to filter Projects to count.
     * @example
     * // Count the number of Projects
     * const count = await prisma.projects.count({
     *   where: {
     *     // ... the filter for the Projects we want to count
     *   }
     * })
    **/
    count<T extends ProjectsCountArgs>(
      args?: Subset<T, ProjectsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectsAggregateArgs>(args: Subset<T, ProjectsAggregateArgs>): Prisma.PrismaPromise<GetProjectsAggregateType<T>>

    /**
     * Group by Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectsGroupByArgs['orderBy'] }
        : { orderBy?: ProjectsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Projects.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProjectsClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Projects base type for findUnique actions
   */
  export type ProjectsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Projects
     */
    select?: ProjectsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectsInclude | null
    /**
     * Filter, which Projects to fetch.
     */
    where: ProjectsWhereUniqueInput
  }

  /**
   * Projects findUnique
   */
  export interface ProjectsFindUniqueArgs extends ProjectsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Projects findUniqueOrThrow
   */
  export type ProjectsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Projects
     */
    select?: ProjectsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectsInclude | null
    /**
     * Filter, which Projects to fetch.
     */
    where: ProjectsWhereUniqueInput
  }


  /**
   * Projects base type for findFirst actions
   */
  export type ProjectsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Projects
     */
    select?: ProjectsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectsInclude | null
    /**
     * Filter, which Projects to fetch.
     */
    where?: ProjectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: Enumerable<ProjectsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: Enumerable<ProjectsScalarFieldEnum>
  }

  /**
   * Projects findFirst
   */
  export interface ProjectsFindFirstArgs extends ProjectsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Projects findFirstOrThrow
   */
  export type ProjectsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Projects
     */
    select?: ProjectsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectsInclude | null
    /**
     * Filter, which Projects to fetch.
     */
    where?: ProjectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: Enumerable<ProjectsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: Enumerable<ProjectsScalarFieldEnum>
  }


  /**
   * Projects findMany
   */
  export type ProjectsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Projects
     */
    select?: ProjectsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectsInclude | null
    /**
     * Filter, which Projects to fetch.
     */
    where?: ProjectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: Enumerable<ProjectsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Projects.
     */
    cursor?: ProjectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    distinct?: Enumerable<ProjectsScalarFieldEnum>
  }


  /**
   * Projects create
   */
  export type ProjectsCreateArgs = {
    /**
     * Select specific fields to fetch from the Projects
     */
    select?: ProjectsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectsInclude | null
    /**
     * The data needed to create a Projects.
     */
    data: XOR<ProjectsCreateInput, ProjectsUncheckedCreateInput>
  }


  /**
   * Projects createMany
   */
  export type ProjectsCreateManyArgs = {
    /**
     * The data used to create many Projects.
     */
    data: Enumerable<ProjectsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Projects update
   */
  export type ProjectsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Projects
     */
    select?: ProjectsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectsInclude | null
    /**
     * The data needed to update a Projects.
     */
    data: XOR<ProjectsUpdateInput, ProjectsUncheckedUpdateInput>
    /**
     * Choose, which Projects to update.
     */
    where: ProjectsWhereUniqueInput
  }


  /**
   * Projects updateMany
   */
  export type ProjectsUpdateManyArgs = {
    /**
     * The data used to update Projects.
     */
    data: XOR<ProjectsUpdateManyMutationInput, ProjectsUncheckedUpdateManyInput>
    /**
     * Filter which Projects to update
     */
    where?: ProjectsWhereInput
  }


  /**
   * Projects upsert
   */
  export type ProjectsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Projects
     */
    select?: ProjectsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectsInclude | null
    /**
     * The filter to search for the Projects to update in case it exists.
     */
    where: ProjectsWhereUniqueInput
    /**
     * In case the Projects found by the `where` argument doesn't exist, create a new Projects with this data.
     */
    create: XOR<ProjectsCreateInput, ProjectsUncheckedCreateInput>
    /**
     * In case the Projects was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectsUpdateInput, ProjectsUncheckedUpdateInput>
  }


  /**
   * Projects delete
   */
  export type ProjectsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Projects
     */
    select?: ProjectsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectsInclude | null
    /**
     * Filter which Projects to delete.
     */
    where: ProjectsWhereUniqueInput
  }


  /**
   * Projects deleteMany
   */
  export type ProjectsDeleteManyArgs = {
    /**
     * Filter which Projects to delete
     */
    where?: ProjectsWhereInput
  }


  /**
   * Projects without action
   */
  export type ProjectsArgs = {
    /**
     * Select specific fields to fetch from the Projects
     */
    select?: ProjectsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectsInclude | null
  }



  /**
   * Model Education
   */


  export type AggregateEducation = {
    _count: EducationCountAggregateOutputType | null
    _avg: EducationAvgAggregateOutputType | null
    _sum: EducationSumAggregateOutputType | null
    _min: EducationMinAggregateOutputType | null
    _max: EducationMaxAggregateOutputType | null
  }

  export type EducationAvgAggregateOutputType = {
    id: number | null
    priority: number | null
  }

  export type EducationSumAggregateOutputType = {
    id: number | null
    priority: number | null
  }

  export type EducationMinAggregateOutputType = {
    id: number | null
    username: string | null
    priority: number | null
    from: string | null
    to: string | null
    institution: string | null
    description: string | null
    percentage: string | null
  }

  export type EducationMaxAggregateOutputType = {
    id: number | null
    username: string | null
    priority: number | null
    from: string | null
    to: string | null
    institution: string | null
    description: string | null
    percentage: string | null
  }

  export type EducationCountAggregateOutputType = {
    id: number
    username: number
    priority: number
    from: number
    to: number
    institution: number
    description: number
    percentage: number
    _all: number
  }


  export type EducationAvgAggregateInputType = {
    id?: true
    priority?: true
  }

  export type EducationSumAggregateInputType = {
    id?: true
    priority?: true
  }

  export type EducationMinAggregateInputType = {
    id?: true
    username?: true
    priority?: true
    from?: true
    to?: true
    institution?: true
    description?: true
    percentage?: true
  }

  export type EducationMaxAggregateInputType = {
    id?: true
    username?: true
    priority?: true
    from?: true
    to?: true
    institution?: true
    description?: true
    percentage?: true
  }

  export type EducationCountAggregateInputType = {
    id?: true
    username?: true
    priority?: true
    from?: true
    to?: true
    institution?: true
    description?: true
    percentage?: true
    _all?: true
  }

  export type EducationAggregateArgs = {
    /**
     * Filter which Education to aggregate.
     */
    where?: EducationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Educations to fetch.
     */
    orderBy?: Enumerable<EducationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EducationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Educations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Educations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Educations
    **/
    _count?: true | EducationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EducationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EducationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EducationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EducationMaxAggregateInputType
  }

  export type GetEducationAggregateType<T extends EducationAggregateArgs> = {
        [P in keyof T & keyof AggregateEducation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEducation[P]>
      : GetScalarType<T[P], AggregateEducation[P]>
  }




  export type EducationGroupByArgs = {
    where?: EducationWhereInput
    orderBy?: Enumerable<EducationOrderByWithAggregationInput>
    by: EducationScalarFieldEnum[]
    having?: EducationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EducationCountAggregateInputType | true
    _avg?: EducationAvgAggregateInputType
    _sum?: EducationSumAggregateInputType
    _min?: EducationMinAggregateInputType
    _max?: EducationMaxAggregateInputType
  }


  export type EducationGroupByOutputType = {
    id: number
    username: string | null
    priority: number
    from: string
    to: string
    institution: string
    description: string
    percentage: string
    _count: EducationCountAggregateOutputType | null
    _avg: EducationAvgAggregateOutputType | null
    _sum: EducationSumAggregateOutputType | null
    _min: EducationMinAggregateOutputType | null
    _max: EducationMaxAggregateOutputType | null
  }

  type GetEducationGroupByPayload<T extends EducationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<EducationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EducationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EducationGroupByOutputType[P]>
            : GetScalarType<T[P], EducationGroupByOutputType[P]>
        }
      >
    >


  export type EducationSelect = {
    id?: boolean
    username?: boolean
    priority?: boolean
    from?: boolean
    to?: boolean
    institution?: boolean
    description?: boolean
    percentage?: boolean
    user?: boolean | UserArgs
  }


  export type EducationInclude = {
    user?: boolean | UserArgs
  }

  export type EducationGetPayload<S extends boolean | null | undefined | EducationArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Education :
    S extends undefined ? never :
    S extends { include: any } & (EducationArgs | EducationFindManyArgs)
    ? Education  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (EducationArgs | EducationFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> | null :  P extends keyof Education ? Education[P] : never
  } 
      : Education


  type EducationCountArgs = 
    Omit<EducationFindManyArgs, 'select' | 'include'> & {
      select?: EducationCountAggregateInputType | true
    }

  export interface EducationDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Education that matches the filter.
     * @param {EducationFindUniqueArgs} args - Arguments to find a Education
     * @example
     * // Get one Education
     * const education = await prisma.education.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EducationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, EducationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Education'> extends True ? Prisma__EducationClient<EducationGetPayload<T>> : Prisma__EducationClient<EducationGetPayload<T> | null, null>

    /**
     * Find one Education that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EducationFindUniqueOrThrowArgs} args - Arguments to find a Education
     * @example
     * // Get one Education
     * const education = await prisma.education.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EducationFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, EducationFindUniqueOrThrowArgs>
    ): Prisma__EducationClient<EducationGetPayload<T>>

    /**
     * Find the first Education that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationFindFirstArgs} args - Arguments to find a Education
     * @example
     * // Get one Education
     * const education = await prisma.education.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EducationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, EducationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Education'> extends True ? Prisma__EducationClient<EducationGetPayload<T>> : Prisma__EducationClient<EducationGetPayload<T> | null, null>

    /**
     * Find the first Education that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationFindFirstOrThrowArgs} args - Arguments to find a Education
     * @example
     * // Get one Education
     * const education = await prisma.education.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EducationFindFirstOrThrowArgs>(
      args?: SelectSubset<T, EducationFindFirstOrThrowArgs>
    ): Prisma__EducationClient<EducationGetPayload<T>>

    /**
     * Find zero or more Educations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Educations
     * const educations = await prisma.education.findMany()
     * 
     * // Get first 10 Educations
     * const educations = await prisma.education.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const educationWithIdOnly = await prisma.education.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EducationFindManyArgs>(
      args?: SelectSubset<T, EducationFindManyArgs>
    ): Prisma.PrismaPromise<Array<EducationGetPayload<T>>>

    /**
     * Create a Education.
     * @param {EducationCreateArgs} args - Arguments to create a Education.
     * @example
     * // Create one Education
     * const Education = await prisma.education.create({
     *   data: {
     *     // ... data to create a Education
     *   }
     * })
     * 
    **/
    create<T extends EducationCreateArgs>(
      args: SelectSubset<T, EducationCreateArgs>
    ): Prisma__EducationClient<EducationGetPayload<T>>

    /**
     * Create many Educations.
     *     @param {EducationCreateManyArgs} args - Arguments to create many Educations.
     *     @example
     *     // Create many Educations
     *     const education = await prisma.education.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EducationCreateManyArgs>(
      args?: SelectSubset<T, EducationCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Education.
     * @param {EducationDeleteArgs} args - Arguments to delete one Education.
     * @example
     * // Delete one Education
     * const Education = await prisma.education.delete({
     *   where: {
     *     // ... filter to delete one Education
     *   }
     * })
     * 
    **/
    delete<T extends EducationDeleteArgs>(
      args: SelectSubset<T, EducationDeleteArgs>
    ): Prisma__EducationClient<EducationGetPayload<T>>

    /**
     * Update one Education.
     * @param {EducationUpdateArgs} args - Arguments to update one Education.
     * @example
     * // Update one Education
     * const education = await prisma.education.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EducationUpdateArgs>(
      args: SelectSubset<T, EducationUpdateArgs>
    ): Prisma__EducationClient<EducationGetPayload<T>>

    /**
     * Delete zero or more Educations.
     * @param {EducationDeleteManyArgs} args - Arguments to filter Educations to delete.
     * @example
     * // Delete a few Educations
     * const { count } = await prisma.education.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EducationDeleteManyArgs>(
      args?: SelectSubset<T, EducationDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Educations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Educations
     * const education = await prisma.education.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EducationUpdateManyArgs>(
      args: SelectSubset<T, EducationUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Education.
     * @param {EducationUpsertArgs} args - Arguments to update or create a Education.
     * @example
     * // Update or create a Education
     * const education = await prisma.education.upsert({
     *   create: {
     *     // ... data to create a Education
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Education we want to update
     *   }
     * })
    **/
    upsert<T extends EducationUpsertArgs>(
      args: SelectSubset<T, EducationUpsertArgs>
    ): Prisma__EducationClient<EducationGetPayload<T>>

    /**
     * Count the number of Educations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationCountArgs} args - Arguments to filter Educations to count.
     * @example
     * // Count the number of Educations
     * const count = await prisma.education.count({
     *   where: {
     *     // ... the filter for the Educations we want to count
     *   }
     * })
    **/
    count<T extends EducationCountArgs>(
      args?: Subset<T, EducationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EducationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Education.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EducationAggregateArgs>(args: Subset<T, EducationAggregateArgs>): Prisma.PrismaPromise<GetEducationAggregateType<T>>

    /**
     * Group by Education.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EducationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EducationGroupByArgs['orderBy'] }
        : { orderBy?: EducationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EducationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEducationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Education.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__EducationClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Education base type for findUnique actions
   */
  export type EducationFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EducationInclude | null
    /**
     * Filter, which Education to fetch.
     */
    where: EducationWhereUniqueInput
  }

  /**
   * Education findUnique
   */
  export interface EducationFindUniqueArgs extends EducationFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Education findUniqueOrThrow
   */
  export type EducationFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EducationInclude | null
    /**
     * Filter, which Education to fetch.
     */
    where: EducationWhereUniqueInput
  }


  /**
   * Education base type for findFirst actions
   */
  export type EducationFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EducationInclude | null
    /**
     * Filter, which Education to fetch.
     */
    where?: EducationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Educations to fetch.
     */
    orderBy?: Enumerable<EducationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Educations.
     */
    cursor?: EducationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Educations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Educations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Educations.
     */
    distinct?: Enumerable<EducationScalarFieldEnum>
  }

  /**
   * Education findFirst
   */
  export interface EducationFindFirstArgs extends EducationFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Education findFirstOrThrow
   */
  export type EducationFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EducationInclude | null
    /**
     * Filter, which Education to fetch.
     */
    where?: EducationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Educations to fetch.
     */
    orderBy?: Enumerable<EducationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Educations.
     */
    cursor?: EducationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Educations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Educations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Educations.
     */
    distinct?: Enumerable<EducationScalarFieldEnum>
  }


  /**
   * Education findMany
   */
  export type EducationFindManyArgs = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EducationInclude | null
    /**
     * Filter, which Educations to fetch.
     */
    where?: EducationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Educations to fetch.
     */
    orderBy?: Enumerable<EducationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Educations.
     */
    cursor?: EducationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Educations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Educations.
     */
    skip?: number
    distinct?: Enumerable<EducationScalarFieldEnum>
  }


  /**
   * Education create
   */
  export type EducationCreateArgs = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EducationInclude | null
    /**
     * The data needed to create a Education.
     */
    data: XOR<EducationCreateInput, EducationUncheckedCreateInput>
  }


  /**
   * Education createMany
   */
  export type EducationCreateManyArgs = {
    /**
     * The data used to create many Educations.
     */
    data: Enumerable<EducationCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Education update
   */
  export type EducationUpdateArgs = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EducationInclude | null
    /**
     * The data needed to update a Education.
     */
    data: XOR<EducationUpdateInput, EducationUncheckedUpdateInput>
    /**
     * Choose, which Education to update.
     */
    where: EducationWhereUniqueInput
  }


  /**
   * Education updateMany
   */
  export type EducationUpdateManyArgs = {
    /**
     * The data used to update Educations.
     */
    data: XOR<EducationUpdateManyMutationInput, EducationUncheckedUpdateManyInput>
    /**
     * Filter which Educations to update
     */
    where?: EducationWhereInput
  }


  /**
   * Education upsert
   */
  export type EducationUpsertArgs = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EducationInclude | null
    /**
     * The filter to search for the Education to update in case it exists.
     */
    where: EducationWhereUniqueInput
    /**
     * In case the Education found by the `where` argument doesn't exist, create a new Education with this data.
     */
    create: XOR<EducationCreateInput, EducationUncheckedCreateInput>
    /**
     * In case the Education was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EducationUpdateInput, EducationUncheckedUpdateInput>
  }


  /**
   * Education delete
   */
  export type EducationDeleteArgs = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EducationInclude | null
    /**
     * Filter which Education to delete.
     */
    where: EducationWhereUniqueInput
  }


  /**
   * Education deleteMany
   */
  export type EducationDeleteManyArgs = {
    /**
     * Filter which Educations to delete
     */
    where?: EducationWhereInput
  }


  /**
   * Education without action
   */
  export type EducationArgs = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EducationInclude | null
  }



  /**
   * Model Experience
   */


  export type AggregateExperience = {
    _count: ExperienceCountAggregateOutputType | null
    _avg: ExperienceAvgAggregateOutputType | null
    _sum: ExperienceSumAggregateOutputType | null
    _min: ExperienceMinAggregateOutputType | null
    _max: ExperienceMaxAggregateOutputType | null
  }

  export type ExperienceAvgAggregateOutputType = {
    id: number | null
    priority: number | null
  }

  export type ExperienceSumAggregateOutputType = {
    id: number | null
    priority: number | null
  }

  export type ExperienceMinAggregateOutputType = {
    id: number | null
    username: string | null
    role: string | null
    company: string | null
    from: string | null
    to: string | null
    priority: number | null
    description: string | null
  }

  export type ExperienceMaxAggregateOutputType = {
    id: number | null
    username: string | null
    role: string | null
    company: string | null
    from: string | null
    to: string | null
    priority: number | null
    description: string | null
  }

  export type ExperienceCountAggregateOutputType = {
    id: number
    username: number
    role: number
    company: number
    from: number
    to: number
    priority: number
    description: number
    _all: number
  }


  export type ExperienceAvgAggregateInputType = {
    id?: true
    priority?: true
  }

  export type ExperienceSumAggregateInputType = {
    id?: true
    priority?: true
  }

  export type ExperienceMinAggregateInputType = {
    id?: true
    username?: true
    role?: true
    company?: true
    from?: true
    to?: true
    priority?: true
    description?: true
  }

  export type ExperienceMaxAggregateInputType = {
    id?: true
    username?: true
    role?: true
    company?: true
    from?: true
    to?: true
    priority?: true
    description?: true
  }

  export type ExperienceCountAggregateInputType = {
    id?: true
    username?: true
    role?: true
    company?: true
    from?: true
    to?: true
    priority?: true
    description?: true
    _all?: true
  }

  export type ExperienceAggregateArgs = {
    /**
     * Filter which Experience to aggregate.
     */
    where?: ExperienceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Experiences to fetch.
     */
    orderBy?: Enumerable<ExperienceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExperienceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Experiences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Experiences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Experiences
    **/
    _count?: true | ExperienceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExperienceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExperienceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExperienceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExperienceMaxAggregateInputType
  }

  export type GetExperienceAggregateType<T extends ExperienceAggregateArgs> = {
        [P in keyof T & keyof AggregateExperience]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExperience[P]>
      : GetScalarType<T[P], AggregateExperience[P]>
  }




  export type ExperienceGroupByArgs = {
    where?: ExperienceWhereInput
    orderBy?: Enumerable<ExperienceOrderByWithAggregationInput>
    by: ExperienceScalarFieldEnum[]
    having?: ExperienceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExperienceCountAggregateInputType | true
    _avg?: ExperienceAvgAggregateInputType
    _sum?: ExperienceSumAggregateInputType
    _min?: ExperienceMinAggregateInputType
    _max?: ExperienceMaxAggregateInputType
  }


  export type ExperienceGroupByOutputType = {
    id: number
    username: string
    role: string
    company: string
    from: string
    to: string
    priority: number
    description: string
    _count: ExperienceCountAggregateOutputType | null
    _avg: ExperienceAvgAggregateOutputType | null
    _sum: ExperienceSumAggregateOutputType | null
    _min: ExperienceMinAggregateOutputType | null
    _max: ExperienceMaxAggregateOutputType | null
  }

  type GetExperienceGroupByPayload<T extends ExperienceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ExperienceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExperienceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExperienceGroupByOutputType[P]>
            : GetScalarType<T[P], ExperienceGroupByOutputType[P]>
        }
      >
    >


  export type ExperienceSelect = {
    id?: boolean
    username?: boolean
    role?: boolean
    company?: boolean
    from?: boolean
    to?: boolean
    priority?: boolean
    description?: boolean
    user?: boolean | UserArgs
  }


  export type ExperienceInclude = {
    user?: boolean | UserArgs
  }

  export type ExperienceGetPayload<S extends boolean | null | undefined | ExperienceArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Experience :
    S extends undefined ? never :
    S extends { include: any } & (ExperienceArgs | ExperienceFindManyArgs)
    ? Experience  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (ExperienceArgs | ExperienceFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> | null :  P extends keyof Experience ? Experience[P] : never
  } 
      : Experience


  type ExperienceCountArgs = 
    Omit<ExperienceFindManyArgs, 'select' | 'include'> & {
      select?: ExperienceCountAggregateInputType | true
    }

  export interface ExperienceDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Experience that matches the filter.
     * @param {ExperienceFindUniqueArgs} args - Arguments to find a Experience
     * @example
     * // Get one Experience
     * const experience = await prisma.experience.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ExperienceFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ExperienceFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Experience'> extends True ? Prisma__ExperienceClient<ExperienceGetPayload<T>> : Prisma__ExperienceClient<ExperienceGetPayload<T> | null, null>

    /**
     * Find one Experience that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ExperienceFindUniqueOrThrowArgs} args - Arguments to find a Experience
     * @example
     * // Get one Experience
     * const experience = await prisma.experience.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ExperienceFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ExperienceFindUniqueOrThrowArgs>
    ): Prisma__ExperienceClient<ExperienceGetPayload<T>>

    /**
     * Find the first Experience that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperienceFindFirstArgs} args - Arguments to find a Experience
     * @example
     * // Get one Experience
     * const experience = await prisma.experience.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ExperienceFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ExperienceFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Experience'> extends True ? Prisma__ExperienceClient<ExperienceGetPayload<T>> : Prisma__ExperienceClient<ExperienceGetPayload<T> | null, null>

    /**
     * Find the first Experience that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperienceFindFirstOrThrowArgs} args - Arguments to find a Experience
     * @example
     * // Get one Experience
     * const experience = await prisma.experience.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ExperienceFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ExperienceFindFirstOrThrowArgs>
    ): Prisma__ExperienceClient<ExperienceGetPayload<T>>

    /**
     * Find zero or more Experiences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperienceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Experiences
     * const experiences = await prisma.experience.findMany()
     * 
     * // Get first 10 Experiences
     * const experiences = await prisma.experience.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const experienceWithIdOnly = await prisma.experience.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ExperienceFindManyArgs>(
      args?: SelectSubset<T, ExperienceFindManyArgs>
    ): Prisma.PrismaPromise<Array<ExperienceGetPayload<T>>>

    /**
     * Create a Experience.
     * @param {ExperienceCreateArgs} args - Arguments to create a Experience.
     * @example
     * // Create one Experience
     * const Experience = await prisma.experience.create({
     *   data: {
     *     // ... data to create a Experience
     *   }
     * })
     * 
    **/
    create<T extends ExperienceCreateArgs>(
      args: SelectSubset<T, ExperienceCreateArgs>
    ): Prisma__ExperienceClient<ExperienceGetPayload<T>>

    /**
     * Create many Experiences.
     *     @param {ExperienceCreateManyArgs} args - Arguments to create many Experiences.
     *     @example
     *     // Create many Experiences
     *     const experience = await prisma.experience.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ExperienceCreateManyArgs>(
      args?: SelectSubset<T, ExperienceCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Experience.
     * @param {ExperienceDeleteArgs} args - Arguments to delete one Experience.
     * @example
     * // Delete one Experience
     * const Experience = await prisma.experience.delete({
     *   where: {
     *     // ... filter to delete one Experience
     *   }
     * })
     * 
    **/
    delete<T extends ExperienceDeleteArgs>(
      args: SelectSubset<T, ExperienceDeleteArgs>
    ): Prisma__ExperienceClient<ExperienceGetPayload<T>>

    /**
     * Update one Experience.
     * @param {ExperienceUpdateArgs} args - Arguments to update one Experience.
     * @example
     * // Update one Experience
     * const experience = await prisma.experience.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ExperienceUpdateArgs>(
      args: SelectSubset<T, ExperienceUpdateArgs>
    ): Prisma__ExperienceClient<ExperienceGetPayload<T>>

    /**
     * Delete zero or more Experiences.
     * @param {ExperienceDeleteManyArgs} args - Arguments to filter Experiences to delete.
     * @example
     * // Delete a few Experiences
     * const { count } = await prisma.experience.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ExperienceDeleteManyArgs>(
      args?: SelectSubset<T, ExperienceDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Experiences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperienceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Experiences
     * const experience = await prisma.experience.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ExperienceUpdateManyArgs>(
      args: SelectSubset<T, ExperienceUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Experience.
     * @param {ExperienceUpsertArgs} args - Arguments to update or create a Experience.
     * @example
     * // Update or create a Experience
     * const experience = await prisma.experience.upsert({
     *   create: {
     *     // ... data to create a Experience
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Experience we want to update
     *   }
     * })
    **/
    upsert<T extends ExperienceUpsertArgs>(
      args: SelectSubset<T, ExperienceUpsertArgs>
    ): Prisma__ExperienceClient<ExperienceGetPayload<T>>

    /**
     * Count the number of Experiences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperienceCountArgs} args - Arguments to filter Experiences to count.
     * @example
     * // Count the number of Experiences
     * const count = await prisma.experience.count({
     *   where: {
     *     // ... the filter for the Experiences we want to count
     *   }
     * })
    **/
    count<T extends ExperienceCountArgs>(
      args?: Subset<T, ExperienceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExperienceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Experience.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperienceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExperienceAggregateArgs>(args: Subset<T, ExperienceAggregateArgs>): Prisma.PrismaPromise<GetExperienceAggregateType<T>>

    /**
     * Group by Experience.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperienceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExperienceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExperienceGroupByArgs['orderBy'] }
        : { orderBy?: ExperienceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExperienceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExperienceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Experience.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ExperienceClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Experience base type for findUnique actions
   */
  export type ExperienceFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Experience
     */
    select?: ExperienceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExperienceInclude | null
    /**
     * Filter, which Experience to fetch.
     */
    where: ExperienceWhereUniqueInput
  }

  /**
   * Experience findUnique
   */
  export interface ExperienceFindUniqueArgs extends ExperienceFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Experience findUniqueOrThrow
   */
  export type ExperienceFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Experience
     */
    select?: ExperienceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExperienceInclude | null
    /**
     * Filter, which Experience to fetch.
     */
    where: ExperienceWhereUniqueInput
  }


  /**
   * Experience base type for findFirst actions
   */
  export type ExperienceFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Experience
     */
    select?: ExperienceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExperienceInclude | null
    /**
     * Filter, which Experience to fetch.
     */
    where?: ExperienceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Experiences to fetch.
     */
    orderBy?: Enumerable<ExperienceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Experiences.
     */
    cursor?: ExperienceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Experiences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Experiences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Experiences.
     */
    distinct?: Enumerable<ExperienceScalarFieldEnum>
  }

  /**
   * Experience findFirst
   */
  export interface ExperienceFindFirstArgs extends ExperienceFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Experience findFirstOrThrow
   */
  export type ExperienceFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Experience
     */
    select?: ExperienceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExperienceInclude | null
    /**
     * Filter, which Experience to fetch.
     */
    where?: ExperienceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Experiences to fetch.
     */
    orderBy?: Enumerable<ExperienceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Experiences.
     */
    cursor?: ExperienceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Experiences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Experiences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Experiences.
     */
    distinct?: Enumerable<ExperienceScalarFieldEnum>
  }


  /**
   * Experience findMany
   */
  export type ExperienceFindManyArgs = {
    /**
     * Select specific fields to fetch from the Experience
     */
    select?: ExperienceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExperienceInclude | null
    /**
     * Filter, which Experiences to fetch.
     */
    where?: ExperienceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Experiences to fetch.
     */
    orderBy?: Enumerable<ExperienceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Experiences.
     */
    cursor?: ExperienceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Experiences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Experiences.
     */
    skip?: number
    distinct?: Enumerable<ExperienceScalarFieldEnum>
  }


  /**
   * Experience create
   */
  export type ExperienceCreateArgs = {
    /**
     * Select specific fields to fetch from the Experience
     */
    select?: ExperienceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExperienceInclude | null
    /**
     * The data needed to create a Experience.
     */
    data: XOR<ExperienceCreateInput, ExperienceUncheckedCreateInput>
  }


  /**
   * Experience createMany
   */
  export type ExperienceCreateManyArgs = {
    /**
     * The data used to create many Experiences.
     */
    data: Enumerable<ExperienceCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Experience update
   */
  export type ExperienceUpdateArgs = {
    /**
     * Select specific fields to fetch from the Experience
     */
    select?: ExperienceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExperienceInclude | null
    /**
     * The data needed to update a Experience.
     */
    data: XOR<ExperienceUpdateInput, ExperienceUncheckedUpdateInput>
    /**
     * Choose, which Experience to update.
     */
    where: ExperienceWhereUniqueInput
  }


  /**
   * Experience updateMany
   */
  export type ExperienceUpdateManyArgs = {
    /**
     * The data used to update Experiences.
     */
    data: XOR<ExperienceUpdateManyMutationInput, ExperienceUncheckedUpdateManyInput>
    /**
     * Filter which Experiences to update
     */
    where?: ExperienceWhereInput
  }


  /**
   * Experience upsert
   */
  export type ExperienceUpsertArgs = {
    /**
     * Select specific fields to fetch from the Experience
     */
    select?: ExperienceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExperienceInclude | null
    /**
     * The filter to search for the Experience to update in case it exists.
     */
    where: ExperienceWhereUniqueInput
    /**
     * In case the Experience found by the `where` argument doesn't exist, create a new Experience with this data.
     */
    create: XOR<ExperienceCreateInput, ExperienceUncheckedCreateInput>
    /**
     * In case the Experience was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExperienceUpdateInput, ExperienceUncheckedUpdateInput>
  }


  /**
   * Experience delete
   */
  export type ExperienceDeleteArgs = {
    /**
     * Select specific fields to fetch from the Experience
     */
    select?: ExperienceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExperienceInclude | null
    /**
     * Filter which Experience to delete.
     */
    where: ExperienceWhereUniqueInput
  }


  /**
   * Experience deleteMany
   */
  export type ExperienceDeleteManyArgs = {
    /**
     * Filter which Experiences to delete
     */
    where?: ExperienceWhereInput
  }


  /**
   * Experience without action
   */
  export type ExperienceArgs = {
    /**
     * Select specific fields to fetch from the Experience
     */
    select?: ExperienceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExperienceInclude | null
  }



  /**
   * Model About
   */


  export type AggregateAbout = {
    _count: AboutCountAggregateOutputType | null
    _avg: AboutAvgAggregateOutputType | null
    _sum: AboutSumAggregateOutputType | null
    _min: AboutMinAggregateOutputType | null
    _max: AboutMaxAggregateOutputType | null
  }

  export type AboutAvgAggregateOutputType = {
    id: number | null
  }

  export type AboutSumAggregateOutputType = {
    id: number | null
  }

  export type AboutMinAggregateOutputType = {
    id: number | null
    username: string | null
    title: string | null
    description: string | null
  }

  export type AboutMaxAggregateOutputType = {
    id: number | null
    username: string | null
    title: string | null
    description: string | null
  }

  export type AboutCountAggregateOutputType = {
    id: number
    username: number
    title: number
    description: number
    _all: number
  }


  export type AboutAvgAggregateInputType = {
    id?: true
  }

  export type AboutSumAggregateInputType = {
    id?: true
  }

  export type AboutMinAggregateInputType = {
    id?: true
    username?: true
    title?: true
    description?: true
  }

  export type AboutMaxAggregateInputType = {
    id?: true
    username?: true
    title?: true
    description?: true
  }

  export type AboutCountAggregateInputType = {
    id?: true
    username?: true
    title?: true
    description?: true
    _all?: true
  }

  export type AboutAggregateArgs = {
    /**
     * Filter which About to aggregate.
     */
    where?: AboutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Abouts to fetch.
     */
    orderBy?: Enumerable<AboutOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AboutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Abouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Abouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Abouts
    **/
    _count?: true | AboutCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AboutAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AboutSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AboutMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AboutMaxAggregateInputType
  }

  export type GetAboutAggregateType<T extends AboutAggregateArgs> = {
        [P in keyof T & keyof AggregateAbout]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAbout[P]>
      : GetScalarType<T[P], AggregateAbout[P]>
  }




  export type AboutGroupByArgs = {
    where?: AboutWhereInput
    orderBy?: Enumerable<AboutOrderByWithAggregationInput>
    by: AboutScalarFieldEnum[]
    having?: AboutScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AboutCountAggregateInputType | true
    _avg?: AboutAvgAggregateInputType
    _sum?: AboutSumAggregateInputType
    _min?: AboutMinAggregateInputType
    _max?: AboutMaxAggregateInputType
  }


  export type AboutGroupByOutputType = {
    id: number
    username: string
    title: string
    description: string
    _count: AboutCountAggregateOutputType | null
    _avg: AboutAvgAggregateOutputType | null
    _sum: AboutSumAggregateOutputType | null
    _min: AboutMinAggregateOutputType | null
    _max: AboutMaxAggregateOutputType | null
  }

  type GetAboutGroupByPayload<T extends AboutGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AboutGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AboutGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AboutGroupByOutputType[P]>
            : GetScalarType<T[P], AboutGroupByOutputType[P]>
        }
      >
    >


  export type AboutSelect = {
    id?: boolean
    username?: boolean
    title?: boolean
    description?: boolean
    user?: boolean | UserArgs
  }


  export type AboutInclude = {
    user?: boolean | UserArgs
  }

  export type AboutGetPayload<S extends boolean | null | undefined | AboutArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? About :
    S extends undefined ? never :
    S extends { include: any } & (AboutArgs | AboutFindManyArgs)
    ? About  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (AboutArgs | AboutFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> | null :  P extends keyof About ? About[P] : never
  } 
      : About


  type AboutCountArgs = 
    Omit<AboutFindManyArgs, 'select' | 'include'> & {
      select?: AboutCountAggregateInputType | true
    }

  export interface AboutDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one About that matches the filter.
     * @param {AboutFindUniqueArgs} args - Arguments to find a About
     * @example
     * // Get one About
     * const about = await prisma.about.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AboutFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AboutFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'About'> extends True ? Prisma__AboutClient<AboutGetPayload<T>> : Prisma__AboutClient<AboutGetPayload<T> | null, null>

    /**
     * Find one About that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AboutFindUniqueOrThrowArgs} args - Arguments to find a About
     * @example
     * // Get one About
     * const about = await prisma.about.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AboutFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, AboutFindUniqueOrThrowArgs>
    ): Prisma__AboutClient<AboutGetPayload<T>>

    /**
     * Find the first About that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AboutFindFirstArgs} args - Arguments to find a About
     * @example
     * // Get one About
     * const about = await prisma.about.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AboutFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AboutFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'About'> extends True ? Prisma__AboutClient<AboutGetPayload<T>> : Prisma__AboutClient<AboutGetPayload<T> | null, null>

    /**
     * Find the first About that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AboutFindFirstOrThrowArgs} args - Arguments to find a About
     * @example
     * // Get one About
     * const about = await prisma.about.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AboutFindFirstOrThrowArgs>(
      args?: SelectSubset<T, AboutFindFirstOrThrowArgs>
    ): Prisma__AboutClient<AboutGetPayload<T>>

    /**
     * Find zero or more Abouts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AboutFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Abouts
     * const abouts = await prisma.about.findMany()
     * 
     * // Get first 10 Abouts
     * const abouts = await prisma.about.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const aboutWithIdOnly = await prisma.about.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AboutFindManyArgs>(
      args?: SelectSubset<T, AboutFindManyArgs>
    ): Prisma.PrismaPromise<Array<AboutGetPayload<T>>>

    /**
     * Create a About.
     * @param {AboutCreateArgs} args - Arguments to create a About.
     * @example
     * // Create one About
     * const About = await prisma.about.create({
     *   data: {
     *     // ... data to create a About
     *   }
     * })
     * 
    **/
    create<T extends AboutCreateArgs>(
      args: SelectSubset<T, AboutCreateArgs>
    ): Prisma__AboutClient<AboutGetPayload<T>>

    /**
     * Create many Abouts.
     *     @param {AboutCreateManyArgs} args - Arguments to create many Abouts.
     *     @example
     *     // Create many Abouts
     *     const about = await prisma.about.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AboutCreateManyArgs>(
      args?: SelectSubset<T, AboutCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a About.
     * @param {AboutDeleteArgs} args - Arguments to delete one About.
     * @example
     * // Delete one About
     * const About = await prisma.about.delete({
     *   where: {
     *     // ... filter to delete one About
     *   }
     * })
     * 
    **/
    delete<T extends AboutDeleteArgs>(
      args: SelectSubset<T, AboutDeleteArgs>
    ): Prisma__AboutClient<AboutGetPayload<T>>

    /**
     * Update one About.
     * @param {AboutUpdateArgs} args - Arguments to update one About.
     * @example
     * // Update one About
     * const about = await prisma.about.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AboutUpdateArgs>(
      args: SelectSubset<T, AboutUpdateArgs>
    ): Prisma__AboutClient<AboutGetPayload<T>>

    /**
     * Delete zero or more Abouts.
     * @param {AboutDeleteManyArgs} args - Arguments to filter Abouts to delete.
     * @example
     * // Delete a few Abouts
     * const { count } = await prisma.about.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AboutDeleteManyArgs>(
      args?: SelectSubset<T, AboutDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Abouts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AboutUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Abouts
     * const about = await prisma.about.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AboutUpdateManyArgs>(
      args: SelectSubset<T, AboutUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one About.
     * @param {AboutUpsertArgs} args - Arguments to update or create a About.
     * @example
     * // Update or create a About
     * const about = await prisma.about.upsert({
     *   create: {
     *     // ... data to create a About
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the About we want to update
     *   }
     * })
    **/
    upsert<T extends AboutUpsertArgs>(
      args: SelectSubset<T, AboutUpsertArgs>
    ): Prisma__AboutClient<AboutGetPayload<T>>

    /**
     * Count the number of Abouts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AboutCountArgs} args - Arguments to filter Abouts to count.
     * @example
     * // Count the number of Abouts
     * const count = await prisma.about.count({
     *   where: {
     *     // ... the filter for the Abouts we want to count
     *   }
     * })
    **/
    count<T extends AboutCountArgs>(
      args?: Subset<T, AboutCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AboutCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a About.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AboutAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AboutAggregateArgs>(args: Subset<T, AboutAggregateArgs>): Prisma.PrismaPromise<GetAboutAggregateType<T>>

    /**
     * Group by About.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AboutGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AboutGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AboutGroupByArgs['orderBy'] }
        : { orderBy?: AboutGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AboutGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAboutGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for About.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AboutClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * About base type for findUnique actions
   */
  export type AboutFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the About
     */
    select?: AboutSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AboutInclude | null
    /**
     * Filter, which About to fetch.
     */
    where: AboutWhereUniqueInput
  }

  /**
   * About findUnique
   */
  export interface AboutFindUniqueArgs extends AboutFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * About findUniqueOrThrow
   */
  export type AboutFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the About
     */
    select?: AboutSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AboutInclude | null
    /**
     * Filter, which About to fetch.
     */
    where: AboutWhereUniqueInput
  }


  /**
   * About base type for findFirst actions
   */
  export type AboutFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the About
     */
    select?: AboutSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AboutInclude | null
    /**
     * Filter, which About to fetch.
     */
    where?: AboutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Abouts to fetch.
     */
    orderBy?: Enumerable<AboutOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Abouts.
     */
    cursor?: AboutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Abouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Abouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Abouts.
     */
    distinct?: Enumerable<AboutScalarFieldEnum>
  }

  /**
   * About findFirst
   */
  export interface AboutFindFirstArgs extends AboutFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * About findFirstOrThrow
   */
  export type AboutFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the About
     */
    select?: AboutSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AboutInclude | null
    /**
     * Filter, which About to fetch.
     */
    where?: AboutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Abouts to fetch.
     */
    orderBy?: Enumerable<AboutOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Abouts.
     */
    cursor?: AboutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Abouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Abouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Abouts.
     */
    distinct?: Enumerable<AboutScalarFieldEnum>
  }


  /**
   * About findMany
   */
  export type AboutFindManyArgs = {
    /**
     * Select specific fields to fetch from the About
     */
    select?: AboutSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AboutInclude | null
    /**
     * Filter, which Abouts to fetch.
     */
    where?: AboutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Abouts to fetch.
     */
    orderBy?: Enumerable<AboutOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Abouts.
     */
    cursor?: AboutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Abouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Abouts.
     */
    skip?: number
    distinct?: Enumerable<AboutScalarFieldEnum>
  }


  /**
   * About create
   */
  export type AboutCreateArgs = {
    /**
     * Select specific fields to fetch from the About
     */
    select?: AboutSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AboutInclude | null
    /**
     * The data needed to create a About.
     */
    data: XOR<AboutCreateInput, AboutUncheckedCreateInput>
  }


  /**
   * About createMany
   */
  export type AboutCreateManyArgs = {
    /**
     * The data used to create many Abouts.
     */
    data: Enumerable<AboutCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * About update
   */
  export type AboutUpdateArgs = {
    /**
     * Select specific fields to fetch from the About
     */
    select?: AboutSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AboutInclude | null
    /**
     * The data needed to update a About.
     */
    data: XOR<AboutUpdateInput, AboutUncheckedUpdateInput>
    /**
     * Choose, which About to update.
     */
    where: AboutWhereUniqueInput
  }


  /**
   * About updateMany
   */
  export type AboutUpdateManyArgs = {
    /**
     * The data used to update Abouts.
     */
    data: XOR<AboutUpdateManyMutationInput, AboutUncheckedUpdateManyInput>
    /**
     * Filter which Abouts to update
     */
    where?: AboutWhereInput
  }


  /**
   * About upsert
   */
  export type AboutUpsertArgs = {
    /**
     * Select specific fields to fetch from the About
     */
    select?: AboutSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AboutInclude | null
    /**
     * The filter to search for the About to update in case it exists.
     */
    where: AboutWhereUniqueInput
    /**
     * In case the About found by the `where` argument doesn't exist, create a new About with this data.
     */
    create: XOR<AboutCreateInput, AboutUncheckedCreateInput>
    /**
     * In case the About was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AboutUpdateInput, AboutUncheckedUpdateInput>
  }


  /**
   * About delete
   */
  export type AboutDeleteArgs = {
    /**
     * Select specific fields to fetch from the About
     */
    select?: AboutSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AboutInclude | null
    /**
     * Filter which About to delete.
     */
    where: AboutWhereUniqueInput
  }


  /**
   * About deleteMany
   */
  export type AboutDeleteManyArgs = {
    /**
     * Filter which Abouts to delete
     */
    where?: AboutWhereInput
  }


  /**
   * About without action
   */
  export type AboutArgs = {
    /**
     * Select specific fields to fetch from the About
     */
    select?: AboutSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AboutInclude | null
  }



  /**
   * Model Skills
   */


  export type AggregateSkills = {
    _count: SkillsCountAggregateOutputType | null
    _avg: SkillsAvgAggregateOutputType | null
    _sum: SkillsSumAggregateOutputType | null
    _min: SkillsMinAggregateOutputType | null
    _max: SkillsMaxAggregateOutputType | null
  }

  export type SkillsAvgAggregateOutputType = {
    id: number | null
  }

  export type SkillsSumAggregateOutputType = {
    id: number | null
  }

  export type SkillsMinAggregateOutputType = {
    id: number | null
    username: string | null
    title: string | null
    percentage: string | null
  }

  export type SkillsMaxAggregateOutputType = {
    id: number | null
    username: string | null
    title: string | null
    percentage: string | null
  }

  export type SkillsCountAggregateOutputType = {
    id: number
    username: number
    title: number
    percentage: number
    _all: number
  }


  export type SkillsAvgAggregateInputType = {
    id?: true
  }

  export type SkillsSumAggregateInputType = {
    id?: true
  }

  export type SkillsMinAggregateInputType = {
    id?: true
    username?: true
    title?: true
    percentage?: true
  }

  export type SkillsMaxAggregateInputType = {
    id?: true
    username?: true
    title?: true
    percentage?: true
  }

  export type SkillsCountAggregateInputType = {
    id?: true
    username?: true
    title?: true
    percentage?: true
    _all?: true
  }

  export type SkillsAggregateArgs = {
    /**
     * Filter which Skills to aggregate.
     */
    where?: SkillsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skills to fetch.
     */
    orderBy?: Enumerable<SkillsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SkillsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Skills
    **/
    _count?: true | SkillsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SkillsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SkillsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SkillsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SkillsMaxAggregateInputType
  }

  export type GetSkillsAggregateType<T extends SkillsAggregateArgs> = {
        [P in keyof T & keyof AggregateSkills]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSkills[P]>
      : GetScalarType<T[P], AggregateSkills[P]>
  }




  export type SkillsGroupByArgs = {
    where?: SkillsWhereInput
    orderBy?: Enumerable<SkillsOrderByWithAggregationInput>
    by: SkillsScalarFieldEnum[]
    having?: SkillsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SkillsCountAggregateInputType | true
    _avg?: SkillsAvgAggregateInputType
    _sum?: SkillsSumAggregateInputType
    _min?: SkillsMinAggregateInputType
    _max?: SkillsMaxAggregateInputType
  }


  export type SkillsGroupByOutputType = {
    id: number
    username: string
    title: string
    percentage: string
    _count: SkillsCountAggregateOutputType | null
    _avg: SkillsAvgAggregateOutputType | null
    _sum: SkillsSumAggregateOutputType | null
    _min: SkillsMinAggregateOutputType | null
    _max: SkillsMaxAggregateOutputType | null
  }

  type GetSkillsGroupByPayload<T extends SkillsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<SkillsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SkillsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SkillsGroupByOutputType[P]>
            : GetScalarType<T[P], SkillsGroupByOutputType[P]>
        }
      >
    >


  export type SkillsSelect = {
    id?: boolean
    username?: boolean
    title?: boolean
    percentage?: boolean
    user?: boolean | UserArgs
  }


  export type SkillsInclude = {
    user?: boolean | UserArgs
  }

  export type SkillsGetPayload<S extends boolean | null | undefined | SkillsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Skills :
    S extends undefined ? never :
    S extends { include: any } & (SkillsArgs | SkillsFindManyArgs)
    ? Skills  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (SkillsArgs | SkillsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> | null :  P extends keyof Skills ? Skills[P] : never
  } 
      : Skills


  type SkillsCountArgs = 
    Omit<SkillsFindManyArgs, 'select' | 'include'> & {
      select?: SkillsCountAggregateInputType | true
    }

  export interface SkillsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Skills that matches the filter.
     * @param {SkillsFindUniqueArgs} args - Arguments to find a Skills
     * @example
     * // Get one Skills
     * const skills = await prisma.skills.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SkillsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SkillsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Skills'> extends True ? Prisma__SkillsClient<SkillsGetPayload<T>> : Prisma__SkillsClient<SkillsGetPayload<T> | null, null>

    /**
     * Find one Skills that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SkillsFindUniqueOrThrowArgs} args - Arguments to find a Skills
     * @example
     * // Get one Skills
     * const skills = await prisma.skills.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SkillsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SkillsFindUniqueOrThrowArgs>
    ): Prisma__SkillsClient<SkillsGetPayload<T>>

    /**
     * Find the first Skills that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillsFindFirstArgs} args - Arguments to find a Skills
     * @example
     * // Get one Skills
     * const skills = await prisma.skills.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SkillsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SkillsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Skills'> extends True ? Prisma__SkillsClient<SkillsGetPayload<T>> : Prisma__SkillsClient<SkillsGetPayload<T> | null, null>

    /**
     * Find the first Skills that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillsFindFirstOrThrowArgs} args - Arguments to find a Skills
     * @example
     * // Get one Skills
     * const skills = await prisma.skills.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SkillsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SkillsFindFirstOrThrowArgs>
    ): Prisma__SkillsClient<SkillsGetPayload<T>>

    /**
     * Find zero or more Skills that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Skills
     * const skills = await prisma.skills.findMany()
     * 
     * // Get first 10 Skills
     * const skills = await prisma.skills.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const skillsWithIdOnly = await prisma.skills.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SkillsFindManyArgs>(
      args?: SelectSubset<T, SkillsFindManyArgs>
    ): Prisma.PrismaPromise<Array<SkillsGetPayload<T>>>

    /**
     * Create a Skills.
     * @param {SkillsCreateArgs} args - Arguments to create a Skills.
     * @example
     * // Create one Skills
     * const Skills = await prisma.skills.create({
     *   data: {
     *     // ... data to create a Skills
     *   }
     * })
     * 
    **/
    create<T extends SkillsCreateArgs>(
      args: SelectSubset<T, SkillsCreateArgs>
    ): Prisma__SkillsClient<SkillsGetPayload<T>>

    /**
     * Create many Skills.
     *     @param {SkillsCreateManyArgs} args - Arguments to create many Skills.
     *     @example
     *     // Create many Skills
     *     const skills = await prisma.skills.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SkillsCreateManyArgs>(
      args?: SelectSubset<T, SkillsCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Skills.
     * @param {SkillsDeleteArgs} args - Arguments to delete one Skills.
     * @example
     * // Delete one Skills
     * const Skills = await prisma.skills.delete({
     *   where: {
     *     // ... filter to delete one Skills
     *   }
     * })
     * 
    **/
    delete<T extends SkillsDeleteArgs>(
      args: SelectSubset<T, SkillsDeleteArgs>
    ): Prisma__SkillsClient<SkillsGetPayload<T>>

    /**
     * Update one Skills.
     * @param {SkillsUpdateArgs} args - Arguments to update one Skills.
     * @example
     * // Update one Skills
     * const skills = await prisma.skills.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SkillsUpdateArgs>(
      args: SelectSubset<T, SkillsUpdateArgs>
    ): Prisma__SkillsClient<SkillsGetPayload<T>>

    /**
     * Delete zero or more Skills.
     * @param {SkillsDeleteManyArgs} args - Arguments to filter Skills to delete.
     * @example
     * // Delete a few Skills
     * const { count } = await prisma.skills.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SkillsDeleteManyArgs>(
      args?: SelectSubset<T, SkillsDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Skills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Skills
     * const skills = await prisma.skills.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SkillsUpdateManyArgs>(
      args: SelectSubset<T, SkillsUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Skills.
     * @param {SkillsUpsertArgs} args - Arguments to update or create a Skills.
     * @example
     * // Update or create a Skills
     * const skills = await prisma.skills.upsert({
     *   create: {
     *     // ... data to create a Skills
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Skills we want to update
     *   }
     * })
    **/
    upsert<T extends SkillsUpsertArgs>(
      args: SelectSubset<T, SkillsUpsertArgs>
    ): Prisma__SkillsClient<SkillsGetPayload<T>>

    /**
     * Count the number of Skills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillsCountArgs} args - Arguments to filter Skills to count.
     * @example
     * // Count the number of Skills
     * const count = await prisma.skills.count({
     *   where: {
     *     // ... the filter for the Skills we want to count
     *   }
     * })
    **/
    count<T extends SkillsCountArgs>(
      args?: Subset<T, SkillsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SkillsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Skills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SkillsAggregateArgs>(args: Subset<T, SkillsAggregateArgs>): Prisma.PrismaPromise<GetSkillsAggregateType<T>>

    /**
     * Group by Skills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SkillsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SkillsGroupByArgs['orderBy'] }
        : { orderBy?: SkillsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SkillsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSkillsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Skills.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SkillsClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Skills base type for findUnique actions
   */
  export type SkillsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Skills
     */
    select?: SkillsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SkillsInclude | null
    /**
     * Filter, which Skills to fetch.
     */
    where: SkillsWhereUniqueInput
  }

  /**
   * Skills findUnique
   */
  export interface SkillsFindUniqueArgs extends SkillsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Skills findUniqueOrThrow
   */
  export type SkillsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Skills
     */
    select?: SkillsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SkillsInclude | null
    /**
     * Filter, which Skills to fetch.
     */
    where: SkillsWhereUniqueInput
  }


  /**
   * Skills base type for findFirst actions
   */
  export type SkillsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Skills
     */
    select?: SkillsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SkillsInclude | null
    /**
     * Filter, which Skills to fetch.
     */
    where?: SkillsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skills to fetch.
     */
    orderBy?: Enumerable<SkillsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Skills.
     */
    cursor?: SkillsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Skills.
     */
    distinct?: Enumerable<SkillsScalarFieldEnum>
  }

  /**
   * Skills findFirst
   */
  export interface SkillsFindFirstArgs extends SkillsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Skills findFirstOrThrow
   */
  export type SkillsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Skills
     */
    select?: SkillsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SkillsInclude | null
    /**
     * Filter, which Skills to fetch.
     */
    where?: SkillsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skills to fetch.
     */
    orderBy?: Enumerable<SkillsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Skills.
     */
    cursor?: SkillsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Skills.
     */
    distinct?: Enumerable<SkillsScalarFieldEnum>
  }


  /**
   * Skills findMany
   */
  export type SkillsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Skills
     */
    select?: SkillsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SkillsInclude | null
    /**
     * Filter, which Skills to fetch.
     */
    where?: SkillsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skills to fetch.
     */
    orderBy?: Enumerable<SkillsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Skills.
     */
    cursor?: SkillsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skills.
     */
    skip?: number
    distinct?: Enumerable<SkillsScalarFieldEnum>
  }


  /**
   * Skills create
   */
  export type SkillsCreateArgs = {
    /**
     * Select specific fields to fetch from the Skills
     */
    select?: SkillsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SkillsInclude | null
    /**
     * The data needed to create a Skills.
     */
    data: XOR<SkillsCreateInput, SkillsUncheckedCreateInput>
  }


  /**
   * Skills createMany
   */
  export type SkillsCreateManyArgs = {
    /**
     * The data used to create many Skills.
     */
    data: Enumerable<SkillsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Skills update
   */
  export type SkillsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Skills
     */
    select?: SkillsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SkillsInclude | null
    /**
     * The data needed to update a Skills.
     */
    data: XOR<SkillsUpdateInput, SkillsUncheckedUpdateInput>
    /**
     * Choose, which Skills to update.
     */
    where: SkillsWhereUniqueInput
  }


  /**
   * Skills updateMany
   */
  export type SkillsUpdateManyArgs = {
    /**
     * The data used to update Skills.
     */
    data: XOR<SkillsUpdateManyMutationInput, SkillsUncheckedUpdateManyInput>
    /**
     * Filter which Skills to update
     */
    where?: SkillsWhereInput
  }


  /**
   * Skills upsert
   */
  export type SkillsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Skills
     */
    select?: SkillsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SkillsInclude | null
    /**
     * The filter to search for the Skills to update in case it exists.
     */
    where: SkillsWhereUniqueInput
    /**
     * In case the Skills found by the `where` argument doesn't exist, create a new Skills with this data.
     */
    create: XOR<SkillsCreateInput, SkillsUncheckedCreateInput>
    /**
     * In case the Skills was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SkillsUpdateInput, SkillsUncheckedUpdateInput>
  }


  /**
   * Skills delete
   */
  export type SkillsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Skills
     */
    select?: SkillsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SkillsInclude | null
    /**
     * Filter which Skills to delete.
     */
    where: SkillsWhereUniqueInput
  }


  /**
   * Skills deleteMany
   */
  export type SkillsDeleteManyArgs = {
    /**
     * Filter which Skills to delete
     */
    where?: SkillsWhereInput
  }


  /**
   * Skills without action
   */
  export type SkillsArgs = {
    /**
     * Select specific fields to fetch from the Skills
     */
    select?: SkillsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SkillsInclude | null
  }



  /**
   * Model ContactFormResponses
   */


  export type AggregateContactFormResponses = {
    _count: ContactFormResponsesCountAggregateOutputType | null
    _avg: ContactFormResponsesAvgAggregateOutputType | null
    _sum: ContactFormResponsesSumAggregateOutputType | null
    _min: ContactFormResponsesMinAggregateOutputType | null
    _max: ContactFormResponsesMaxAggregateOutputType | null
  }

  export type ContactFormResponsesAvgAggregateOutputType = {
    id: number | null
  }

  export type ContactFormResponsesSumAggregateOutputType = {
    id: number | null
  }

  export type ContactFormResponsesMinAggregateOutputType = {
    id: number | null
    username: string | null
    senderName: string | null
    senderMail: string | null
    message: string | null
    date: Date | null
  }

  export type ContactFormResponsesMaxAggregateOutputType = {
    id: number | null
    username: string | null
    senderName: string | null
    senderMail: string | null
    message: string | null
    date: Date | null
  }

  export type ContactFormResponsesCountAggregateOutputType = {
    id: number
    username: number
    senderName: number
    senderMail: number
    message: number
    date: number
    _all: number
  }


  export type ContactFormResponsesAvgAggregateInputType = {
    id?: true
  }

  export type ContactFormResponsesSumAggregateInputType = {
    id?: true
  }

  export type ContactFormResponsesMinAggregateInputType = {
    id?: true
    username?: true
    senderName?: true
    senderMail?: true
    message?: true
    date?: true
  }

  export type ContactFormResponsesMaxAggregateInputType = {
    id?: true
    username?: true
    senderName?: true
    senderMail?: true
    message?: true
    date?: true
  }

  export type ContactFormResponsesCountAggregateInputType = {
    id?: true
    username?: true
    senderName?: true
    senderMail?: true
    message?: true
    date?: true
    _all?: true
  }

  export type ContactFormResponsesAggregateArgs = {
    /**
     * Filter which ContactFormResponses to aggregate.
     */
    where?: ContactFormResponsesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactFormResponses to fetch.
     */
    orderBy?: Enumerable<ContactFormResponsesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContactFormResponsesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactFormResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactFormResponses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ContactFormResponses
    **/
    _count?: true | ContactFormResponsesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContactFormResponsesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContactFormResponsesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContactFormResponsesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContactFormResponsesMaxAggregateInputType
  }

  export type GetContactFormResponsesAggregateType<T extends ContactFormResponsesAggregateArgs> = {
        [P in keyof T & keyof AggregateContactFormResponses]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContactFormResponses[P]>
      : GetScalarType<T[P], AggregateContactFormResponses[P]>
  }




  export type ContactFormResponsesGroupByArgs = {
    where?: ContactFormResponsesWhereInput
    orderBy?: Enumerable<ContactFormResponsesOrderByWithAggregationInput>
    by: ContactFormResponsesScalarFieldEnum[]
    having?: ContactFormResponsesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContactFormResponsesCountAggregateInputType | true
    _avg?: ContactFormResponsesAvgAggregateInputType
    _sum?: ContactFormResponsesSumAggregateInputType
    _min?: ContactFormResponsesMinAggregateInputType
    _max?: ContactFormResponsesMaxAggregateInputType
  }


  export type ContactFormResponsesGroupByOutputType = {
    id: number
    username: string
    senderName: string
    senderMail: string
    message: string
    date: Date
    _count: ContactFormResponsesCountAggregateOutputType | null
    _avg: ContactFormResponsesAvgAggregateOutputType | null
    _sum: ContactFormResponsesSumAggregateOutputType | null
    _min: ContactFormResponsesMinAggregateOutputType | null
    _max: ContactFormResponsesMaxAggregateOutputType | null
  }

  type GetContactFormResponsesGroupByPayload<T extends ContactFormResponsesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ContactFormResponsesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContactFormResponsesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContactFormResponsesGroupByOutputType[P]>
            : GetScalarType<T[P], ContactFormResponsesGroupByOutputType[P]>
        }
      >
    >


  export type ContactFormResponsesSelect = {
    id?: boolean
    username?: boolean
    senderName?: boolean
    senderMail?: boolean
    message?: boolean
    date?: boolean
    user?: boolean | UserArgs
  }


  export type ContactFormResponsesInclude = {
    user?: boolean | UserArgs
  }

  export type ContactFormResponsesGetPayload<S extends boolean | null | undefined | ContactFormResponsesArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ContactFormResponses :
    S extends undefined ? never :
    S extends { include: any } & (ContactFormResponsesArgs | ContactFormResponsesFindManyArgs)
    ? ContactFormResponses  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (ContactFormResponsesArgs | ContactFormResponsesFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> | null :  P extends keyof ContactFormResponses ? ContactFormResponses[P] : never
  } 
      : ContactFormResponses


  type ContactFormResponsesCountArgs = 
    Omit<ContactFormResponsesFindManyArgs, 'select' | 'include'> & {
      select?: ContactFormResponsesCountAggregateInputType | true
    }

  export interface ContactFormResponsesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one ContactFormResponses that matches the filter.
     * @param {ContactFormResponsesFindUniqueArgs} args - Arguments to find a ContactFormResponses
     * @example
     * // Get one ContactFormResponses
     * const contactFormResponses = await prisma.contactFormResponses.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ContactFormResponsesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ContactFormResponsesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ContactFormResponses'> extends True ? Prisma__ContactFormResponsesClient<ContactFormResponsesGetPayload<T>> : Prisma__ContactFormResponsesClient<ContactFormResponsesGetPayload<T> | null, null>

    /**
     * Find one ContactFormResponses that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ContactFormResponsesFindUniqueOrThrowArgs} args - Arguments to find a ContactFormResponses
     * @example
     * // Get one ContactFormResponses
     * const contactFormResponses = await prisma.contactFormResponses.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ContactFormResponsesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ContactFormResponsesFindUniqueOrThrowArgs>
    ): Prisma__ContactFormResponsesClient<ContactFormResponsesGetPayload<T>>

    /**
     * Find the first ContactFormResponses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFormResponsesFindFirstArgs} args - Arguments to find a ContactFormResponses
     * @example
     * // Get one ContactFormResponses
     * const contactFormResponses = await prisma.contactFormResponses.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ContactFormResponsesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ContactFormResponsesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ContactFormResponses'> extends True ? Prisma__ContactFormResponsesClient<ContactFormResponsesGetPayload<T>> : Prisma__ContactFormResponsesClient<ContactFormResponsesGetPayload<T> | null, null>

    /**
     * Find the first ContactFormResponses that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFormResponsesFindFirstOrThrowArgs} args - Arguments to find a ContactFormResponses
     * @example
     * // Get one ContactFormResponses
     * const contactFormResponses = await prisma.contactFormResponses.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ContactFormResponsesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ContactFormResponsesFindFirstOrThrowArgs>
    ): Prisma__ContactFormResponsesClient<ContactFormResponsesGetPayload<T>>

    /**
     * Find zero or more ContactFormResponses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFormResponsesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ContactFormResponses
     * const contactFormResponses = await prisma.contactFormResponses.findMany()
     * 
     * // Get first 10 ContactFormResponses
     * const contactFormResponses = await prisma.contactFormResponses.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contactFormResponsesWithIdOnly = await prisma.contactFormResponses.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ContactFormResponsesFindManyArgs>(
      args?: SelectSubset<T, ContactFormResponsesFindManyArgs>
    ): Prisma.PrismaPromise<Array<ContactFormResponsesGetPayload<T>>>

    /**
     * Create a ContactFormResponses.
     * @param {ContactFormResponsesCreateArgs} args - Arguments to create a ContactFormResponses.
     * @example
     * // Create one ContactFormResponses
     * const ContactFormResponses = await prisma.contactFormResponses.create({
     *   data: {
     *     // ... data to create a ContactFormResponses
     *   }
     * })
     * 
    **/
    create<T extends ContactFormResponsesCreateArgs>(
      args: SelectSubset<T, ContactFormResponsesCreateArgs>
    ): Prisma__ContactFormResponsesClient<ContactFormResponsesGetPayload<T>>

    /**
     * Create many ContactFormResponses.
     *     @param {ContactFormResponsesCreateManyArgs} args - Arguments to create many ContactFormResponses.
     *     @example
     *     // Create many ContactFormResponses
     *     const contactFormResponses = await prisma.contactFormResponses.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ContactFormResponsesCreateManyArgs>(
      args?: SelectSubset<T, ContactFormResponsesCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ContactFormResponses.
     * @param {ContactFormResponsesDeleteArgs} args - Arguments to delete one ContactFormResponses.
     * @example
     * // Delete one ContactFormResponses
     * const ContactFormResponses = await prisma.contactFormResponses.delete({
     *   where: {
     *     // ... filter to delete one ContactFormResponses
     *   }
     * })
     * 
    **/
    delete<T extends ContactFormResponsesDeleteArgs>(
      args: SelectSubset<T, ContactFormResponsesDeleteArgs>
    ): Prisma__ContactFormResponsesClient<ContactFormResponsesGetPayload<T>>

    /**
     * Update one ContactFormResponses.
     * @param {ContactFormResponsesUpdateArgs} args - Arguments to update one ContactFormResponses.
     * @example
     * // Update one ContactFormResponses
     * const contactFormResponses = await prisma.contactFormResponses.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ContactFormResponsesUpdateArgs>(
      args: SelectSubset<T, ContactFormResponsesUpdateArgs>
    ): Prisma__ContactFormResponsesClient<ContactFormResponsesGetPayload<T>>

    /**
     * Delete zero or more ContactFormResponses.
     * @param {ContactFormResponsesDeleteManyArgs} args - Arguments to filter ContactFormResponses to delete.
     * @example
     * // Delete a few ContactFormResponses
     * const { count } = await prisma.contactFormResponses.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ContactFormResponsesDeleteManyArgs>(
      args?: SelectSubset<T, ContactFormResponsesDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContactFormResponses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFormResponsesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ContactFormResponses
     * const contactFormResponses = await prisma.contactFormResponses.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ContactFormResponsesUpdateManyArgs>(
      args: SelectSubset<T, ContactFormResponsesUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ContactFormResponses.
     * @param {ContactFormResponsesUpsertArgs} args - Arguments to update or create a ContactFormResponses.
     * @example
     * // Update or create a ContactFormResponses
     * const contactFormResponses = await prisma.contactFormResponses.upsert({
     *   create: {
     *     // ... data to create a ContactFormResponses
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ContactFormResponses we want to update
     *   }
     * })
    **/
    upsert<T extends ContactFormResponsesUpsertArgs>(
      args: SelectSubset<T, ContactFormResponsesUpsertArgs>
    ): Prisma__ContactFormResponsesClient<ContactFormResponsesGetPayload<T>>

    /**
     * Count the number of ContactFormResponses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFormResponsesCountArgs} args - Arguments to filter ContactFormResponses to count.
     * @example
     * // Count the number of ContactFormResponses
     * const count = await prisma.contactFormResponses.count({
     *   where: {
     *     // ... the filter for the ContactFormResponses we want to count
     *   }
     * })
    **/
    count<T extends ContactFormResponsesCountArgs>(
      args?: Subset<T, ContactFormResponsesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContactFormResponsesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ContactFormResponses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFormResponsesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContactFormResponsesAggregateArgs>(args: Subset<T, ContactFormResponsesAggregateArgs>): Prisma.PrismaPromise<GetContactFormResponsesAggregateType<T>>

    /**
     * Group by ContactFormResponses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFormResponsesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContactFormResponsesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContactFormResponsesGroupByArgs['orderBy'] }
        : { orderBy?: ContactFormResponsesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContactFormResponsesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContactFormResponsesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ContactFormResponses.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ContactFormResponsesClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ContactFormResponses base type for findUnique actions
   */
  export type ContactFormResponsesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the ContactFormResponses
     */
    select?: ContactFormResponsesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContactFormResponsesInclude | null
    /**
     * Filter, which ContactFormResponses to fetch.
     */
    where: ContactFormResponsesWhereUniqueInput
  }

  /**
   * ContactFormResponses findUnique
   */
  export interface ContactFormResponsesFindUniqueArgs extends ContactFormResponsesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ContactFormResponses findUniqueOrThrow
   */
  export type ContactFormResponsesFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ContactFormResponses
     */
    select?: ContactFormResponsesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContactFormResponsesInclude | null
    /**
     * Filter, which ContactFormResponses to fetch.
     */
    where: ContactFormResponsesWhereUniqueInput
  }


  /**
   * ContactFormResponses base type for findFirst actions
   */
  export type ContactFormResponsesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the ContactFormResponses
     */
    select?: ContactFormResponsesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContactFormResponsesInclude | null
    /**
     * Filter, which ContactFormResponses to fetch.
     */
    where?: ContactFormResponsesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactFormResponses to fetch.
     */
    orderBy?: Enumerable<ContactFormResponsesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContactFormResponses.
     */
    cursor?: ContactFormResponsesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactFormResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactFormResponses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContactFormResponses.
     */
    distinct?: Enumerable<ContactFormResponsesScalarFieldEnum>
  }

  /**
   * ContactFormResponses findFirst
   */
  export interface ContactFormResponsesFindFirstArgs extends ContactFormResponsesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ContactFormResponses findFirstOrThrow
   */
  export type ContactFormResponsesFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ContactFormResponses
     */
    select?: ContactFormResponsesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContactFormResponsesInclude | null
    /**
     * Filter, which ContactFormResponses to fetch.
     */
    where?: ContactFormResponsesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactFormResponses to fetch.
     */
    orderBy?: Enumerable<ContactFormResponsesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContactFormResponses.
     */
    cursor?: ContactFormResponsesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactFormResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactFormResponses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContactFormResponses.
     */
    distinct?: Enumerable<ContactFormResponsesScalarFieldEnum>
  }


  /**
   * ContactFormResponses findMany
   */
  export type ContactFormResponsesFindManyArgs = {
    /**
     * Select specific fields to fetch from the ContactFormResponses
     */
    select?: ContactFormResponsesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContactFormResponsesInclude | null
    /**
     * Filter, which ContactFormResponses to fetch.
     */
    where?: ContactFormResponsesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactFormResponses to fetch.
     */
    orderBy?: Enumerable<ContactFormResponsesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ContactFormResponses.
     */
    cursor?: ContactFormResponsesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactFormResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactFormResponses.
     */
    skip?: number
    distinct?: Enumerable<ContactFormResponsesScalarFieldEnum>
  }


  /**
   * ContactFormResponses create
   */
  export type ContactFormResponsesCreateArgs = {
    /**
     * Select specific fields to fetch from the ContactFormResponses
     */
    select?: ContactFormResponsesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContactFormResponsesInclude | null
    /**
     * The data needed to create a ContactFormResponses.
     */
    data: XOR<ContactFormResponsesCreateInput, ContactFormResponsesUncheckedCreateInput>
  }


  /**
   * ContactFormResponses createMany
   */
  export type ContactFormResponsesCreateManyArgs = {
    /**
     * The data used to create many ContactFormResponses.
     */
    data: Enumerable<ContactFormResponsesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ContactFormResponses update
   */
  export type ContactFormResponsesUpdateArgs = {
    /**
     * Select specific fields to fetch from the ContactFormResponses
     */
    select?: ContactFormResponsesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContactFormResponsesInclude | null
    /**
     * The data needed to update a ContactFormResponses.
     */
    data: XOR<ContactFormResponsesUpdateInput, ContactFormResponsesUncheckedUpdateInput>
    /**
     * Choose, which ContactFormResponses to update.
     */
    where: ContactFormResponsesWhereUniqueInput
  }


  /**
   * ContactFormResponses updateMany
   */
  export type ContactFormResponsesUpdateManyArgs = {
    /**
     * The data used to update ContactFormResponses.
     */
    data: XOR<ContactFormResponsesUpdateManyMutationInput, ContactFormResponsesUncheckedUpdateManyInput>
    /**
     * Filter which ContactFormResponses to update
     */
    where?: ContactFormResponsesWhereInput
  }


  /**
   * ContactFormResponses upsert
   */
  export type ContactFormResponsesUpsertArgs = {
    /**
     * Select specific fields to fetch from the ContactFormResponses
     */
    select?: ContactFormResponsesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContactFormResponsesInclude | null
    /**
     * The filter to search for the ContactFormResponses to update in case it exists.
     */
    where: ContactFormResponsesWhereUniqueInput
    /**
     * In case the ContactFormResponses found by the `where` argument doesn't exist, create a new ContactFormResponses with this data.
     */
    create: XOR<ContactFormResponsesCreateInput, ContactFormResponsesUncheckedCreateInput>
    /**
     * In case the ContactFormResponses was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContactFormResponsesUpdateInput, ContactFormResponsesUncheckedUpdateInput>
  }


  /**
   * ContactFormResponses delete
   */
  export type ContactFormResponsesDeleteArgs = {
    /**
     * Select specific fields to fetch from the ContactFormResponses
     */
    select?: ContactFormResponsesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContactFormResponsesInclude | null
    /**
     * Filter which ContactFormResponses to delete.
     */
    where: ContactFormResponsesWhereUniqueInput
  }


  /**
   * ContactFormResponses deleteMany
   */
  export type ContactFormResponsesDeleteManyArgs = {
    /**
     * Filter which ContactFormResponses to delete
     */
    where?: ContactFormResponsesWhereInput
  }


  /**
   * ContactFormResponses without action
   */
  export type ContactFormResponsesArgs = {
    /**
     * Select specific fields to fetch from the ContactFormResponses
     */
    select?: ContactFormResponsesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContactFormResponsesInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const AboutScalarFieldEnum: {
    id: 'id',
    username: 'username',
    title: 'title',
    description: 'description'
  };

  export type AboutScalarFieldEnum = (typeof AboutScalarFieldEnum)[keyof typeof AboutScalarFieldEnum]


  export const ContactFormResponsesScalarFieldEnum: {
    id: 'id',
    username: 'username',
    senderName: 'senderName',
    senderMail: 'senderMail',
    message: 'message',
    date: 'date'
  };

  export type ContactFormResponsesScalarFieldEnum = (typeof ContactFormResponsesScalarFieldEnum)[keyof typeof ContactFormResponsesScalarFieldEnum]


  export const EducationScalarFieldEnum: {
    id: 'id',
    username: 'username',
    priority: 'priority',
    from: 'from',
    to: 'to',
    institution: 'institution',
    description: 'description',
    percentage: 'percentage'
  };

  export type EducationScalarFieldEnum = (typeof EducationScalarFieldEnum)[keyof typeof EducationScalarFieldEnum]


  export const ExperienceScalarFieldEnum: {
    id: 'id',
    username: 'username',
    role: 'role',
    company: 'company',
    from: 'from',
    to: 'to',
    priority: 'priority',
    description: 'description'
  };

  export type ExperienceScalarFieldEnum = (typeof ExperienceScalarFieldEnum)[keyof typeof ExperienceScalarFieldEnum]


  export const ProjectsScalarFieldEnum: {
    id: 'id',
    username: 'username',
    name: 'name',
    description: 'description',
    liveLink: 'liveLink',
    github: 'github',
    category: 'category',
    date: 'date',
    thumbnail: 'thumbnail',
    techUsed: 'techUsed'
  };

  export type ProjectsScalarFieldEnum = (typeof ProjectsScalarFieldEnum)[keyof typeof ProjectsScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SkillsScalarFieldEnum: {
    id: 'id',
    username: 'username',
    title: 'title',
    percentage: 'percentage'
  };

  export type SkillsScalarFieldEnum = (typeof SkillsScalarFieldEnum)[keyof typeof SkillsScalarFieldEnum]


  export const SocialLinksScalarFieldEnum: {
    id: 'id',
    username: 'username',
    linkName: 'linkName',
    url: 'url'
  };

  export type SocialLinksScalarFieldEnum = (typeof SocialLinksScalarFieldEnum)[keyof typeof SocialLinksScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    username: 'username',
    name: 'name',
    password: 'password',
    address: 'address',
    photoURL: 'photoURL',
    gender: 'gender',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    shortDesc: 'shortDesc',
    about: 'about',
    phone: 'phone'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    email?: StringFilter | string
    username?: StringFilter | string
    name?: StringNullableFilter | string | null
    password?: StringFilter | string
    address?: StringNullableFilter | string | null
    photoURL?: StringNullableFilter | string | null
    gender?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    shortDesc?: StringNullableFilter | string | null
    about?: StringNullableFilter | string | null
    phone?: StringNullableFilter | string | null
    socialLinks?: SocialLinksListRelationFilter
    projects?: ProjectsListRelationFilter
    education?: EducationListRelationFilter
    experience?: ExperienceListRelationFilter
    aboutCards?: AboutListRelationFilter
    skills?: SkillsListRelationFilter
    contactResponses?: ContactFormResponsesListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    name?: SortOrder
    password?: SortOrder
    address?: SortOrder
    photoURL?: SortOrder
    gender?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    shortDesc?: SortOrder
    about?: SortOrder
    phone?: SortOrder
    socialLinks?: SocialLinksOrderByRelationAggregateInput
    projects?: ProjectsOrderByRelationAggregateInput
    education?: EducationOrderByRelationAggregateInput
    experience?: ExperienceOrderByRelationAggregateInput
    aboutCards?: AboutOrderByRelationAggregateInput
    skills?: SkillsOrderByRelationAggregateInput
    contactResponses?: ContactFormResponsesOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: number
    email?: string
    username?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    name?: SortOrder
    password?: SortOrder
    address?: SortOrder
    photoURL?: SortOrder
    gender?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    shortDesc?: SortOrder
    about?: SortOrder
    phone?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    email?: StringWithAggregatesFilter | string
    username?: StringWithAggregatesFilter | string
    name?: StringNullableWithAggregatesFilter | string | null
    password?: StringWithAggregatesFilter | string
    address?: StringNullableWithAggregatesFilter | string | null
    photoURL?: StringNullableWithAggregatesFilter | string | null
    gender?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    shortDesc?: StringNullableWithAggregatesFilter | string | null
    about?: StringNullableWithAggregatesFilter | string | null
    phone?: StringNullableWithAggregatesFilter | string | null
  }

  export type SocialLinksWhereInput = {
    AND?: Enumerable<SocialLinksWhereInput>
    OR?: Enumerable<SocialLinksWhereInput>
    NOT?: Enumerable<SocialLinksWhereInput>
    id?: IntFilter | number
    username?: StringFilter | string
    linkName?: StringFilter | string
    url?: StringFilter | string
    user?: XOR<UserRelationFilter, UserWhereInput> | null
  }

  export type SocialLinksOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    linkName?: SortOrder
    url?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SocialLinksWhereUniqueInput = {
    id?: number
  }

  export type SocialLinksOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    linkName?: SortOrder
    url?: SortOrder
    _count?: SocialLinksCountOrderByAggregateInput
    _avg?: SocialLinksAvgOrderByAggregateInput
    _max?: SocialLinksMaxOrderByAggregateInput
    _min?: SocialLinksMinOrderByAggregateInput
    _sum?: SocialLinksSumOrderByAggregateInput
  }

  export type SocialLinksScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SocialLinksScalarWhereWithAggregatesInput>
    OR?: Enumerable<SocialLinksScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SocialLinksScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    username?: StringWithAggregatesFilter | string
    linkName?: StringWithAggregatesFilter | string
    url?: StringWithAggregatesFilter | string
  }

  export type ProjectsWhereInput = {
    AND?: Enumerable<ProjectsWhereInput>
    OR?: Enumerable<ProjectsWhereInput>
    NOT?: Enumerable<ProjectsWhereInput>
    id?: IntFilter | number
    username?: StringNullableFilter | string | null
    name?: StringFilter | string
    description?: StringFilter | string
    liveLink?: StringFilter | string
    github?: StringFilter | string
    category?: StringFilter | string
    date?: DateTimeFilter | Date | string
    thumbnail?: StringFilter | string
    techUsed?: StringNullableListFilter
    user?: XOR<UserRelationFilter, UserWhereInput> | null
  }

  export type ProjectsOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    name?: SortOrder
    description?: SortOrder
    liveLink?: SortOrder
    github?: SortOrder
    category?: SortOrder
    date?: SortOrder
    thumbnail?: SortOrder
    techUsed?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type ProjectsWhereUniqueInput = {
    id?: number
  }

  export type ProjectsOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    name?: SortOrder
    description?: SortOrder
    liveLink?: SortOrder
    github?: SortOrder
    category?: SortOrder
    date?: SortOrder
    thumbnail?: SortOrder
    techUsed?: SortOrder
    _count?: ProjectsCountOrderByAggregateInput
    _avg?: ProjectsAvgOrderByAggregateInput
    _max?: ProjectsMaxOrderByAggregateInput
    _min?: ProjectsMinOrderByAggregateInput
    _sum?: ProjectsSumOrderByAggregateInput
  }

  export type ProjectsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProjectsScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProjectsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProjectsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    username?: StringNullableWithAggregatesFilter | string | null
    name?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    liveLink?: StringWithAggregatesFilter | string
    github?: StringWithAggregatesFilter | string
    category?: StringWithAggregatesFilter | string
    date?: DateTimeWithAggregatesFilter | Date | string
    thumbnail?: StringWithAggregatesFilter | string
    techUsed?: StringNullableListFilter
  }

  export type EducationWhereInput = {
    AND?: Enumerable<EducationWhereInput>
    OR?: Enumerable<EducationWhereInput>
    NOT?: Enumerable<EducationWhereInput>
    id?: IntFilter | number
    username?: StringNullableFilter | string | null
    priority?: IntFilter | number
    from?: StringFilter | string
    to?: StringFilter | string
    institution?: StringFilter | string
    description?: StringFilter | string
    percentage?: StringFilter | string
    user?: XOR<UserRelationFilter, UserWhereInput> | null
  }

  export type EducationOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    priority?: SortOrder
    from?: SortOrder
    to?: SortOrder
    institution?: SortOrder
    description?: SortOrder
    percentage?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type EducationWhereUniqueInput = {
    id?: number
  }

  export type EducationOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    priority?: SortOrder
    from?: SortOrder
    to?: SortOrder
    institution?: SortOrder
    description?: SortOrder
    percentage?: SortOrder
    _count?: EducationCountOrderByAggregateInput
    _avg?: EducationAvgOrderByAggregateInput
    _max?: EducationMaxOrderByAggregateInput
    _min?: EducationMinOrderByAggregateInput
    _sum?: EducationSumOrderByAggregateInput
  }

  export type EducationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<EducationScalarWhereWithAggregatesInput>
    OR?: Enumerable<EducationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<EducationScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    username?: StringNullableWithAggregatesFilter | string | null
    priority?: IntWithAggregatesFilter | number
    from?: StringWithAggregatesFilter | string
    to?: StringWithAggregatesFilter | string
    institution?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    percentage?: StringWithAggregatesFilter | string
  }

  export type ExperienceWhereInput = {
    AND?: Enumerable<ExperienceWhereInput>
    OR?: Enumerable<ExperienceWhereInput>
    NOT?: Enumerable<ExperienceWhereInput>
    id?: IntFilter | number
    username?: StringFilter | string
    role?: StringFilter | string
    company?: StringFilter | string
    from?: StringFilter | string
    to?: StringFilter | string
    priority?: IntFilter | number
    description?: StringFilter | string
    user?: XOR<UserRelationFilter, UserWhereInput> | null
  }

  export type ExperienceOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    role?: SortOrder
    company?: SortOrder
    from?: SortOrder
    to?: SortOrder
    priority?: SortOrder
    description?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type ExperienceWhereUniqueInput = {
    id?: number
  }

  export type ExperienceOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    role?: SortOrder
    company?: SortOrder
    from?: SortOrder
    to?: SortOrder
    priority?: SortOrder
    description?: SortOrder
    _count?: ExperienceCountOrderByAggregateInput
    _avg?: ExperienceAvgOrderByAggregateInput
    _max?: ExperienceMaxOrderByAggregateInput
    _min?: ExperienceMinOrderByAggregateInput
    _sum?: ExperienceSumOrderByAggregateInput
  }

  export type ExperienceScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ExperienceScalarWhereWithAggregatesInput>
    OR?: Enumerable<ExperienceScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ExperienceScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    username?: StringWithAggregatesFilter | string
    role?: StringWithAggregatesFilter | string
    company?: StringWithAggregatesFilter | string
    from?: StringWithAggregatesFilter | string
    to?: StringWithAggregatesFilter | string
    priority?: IntWithAggregatesFilter | number
    description?: StringWithAggregatesFilter | string
  }

  export type AboutWhereInput = {
    AND?: Enumerable<AboutWhereInput>
    OR?: Enumerable<AboutWhereInput>
    NOT?: Enumerable<AboutWhereInput>
    id?: IntFilter | number
    username?: StringFilter | string
    title?: StringFilter | string
    description?: StringFilter | string
    user?: XOR<UserRelationFilter, UserWhereInput> | null
  }

  export type AboutOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    title?: SortOrder
    description?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AboutWhereUniqueInput = {
    id?: number
  }

  export type AboutOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    title?: SortOrder
    description?: SortOrder
    _count?: AboutCountOrderByAggregateInput
    _avg?: AboutAvgOrderByAggregateInput
    _max?: AboutMaxOrderByAggregateInput
    _min?: AboutMinOrderByAggregateInput
    _sum?: AboutSumOrderByAggregateInput
  }

  export type AboutScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AboutScalarWhereWithAggregatesInput>
    OR?: Enumerable<AboutScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AboutScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    username?: StringWithAggregatesFilter | string
    title?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
  }

  export type SkillsWhereInput = {
    AND?: Enumerable<SkillsWhereInput>
    OR?: Enumerable<SkillsWhereInput>
    NOT?: Enumerable<SkillsWhereInput>
    id?: IntFilter | number
    username?: StringFilter | string
    title?: StringFilter | string
    percentage?: StringFilter | string
    user?: XOR<UserRelationFilter, UserWhereInput> | null
  }

  export type SkillsOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    title?: SortOrder
    percentage?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SkillsWhereUniqueInput = {
    id?: number
  }

  export type SkillsOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    title?: SortOrder
    percentage?: SortOrder
    _count?: SkillsCountOrderByAggregateInput
    _avg?: SkillsAvgOrderByAggregateInput
    _max?: SkillsMaxOrderByAggregateInput
    _min?: SkillsMinOrderByAggregateInput
    _sum?: SkillsSumOrderByAggregateInput
  }

  export type SkillsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SkillsScalarWhereWithAggregatesInput>
    OR?: Enumerable<SkillsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SkillsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    username?: StringWithAggregatesFilter | string
    title?: StringWithAggregatesFilter | string
    percentage?: StringWithAggregatesFilter | string
  }

  export type ContactFormResponsesWhereInput = {
    AND?: Enumerable<ContactFormResponsesWhereInput>
    OR?: Enumerable<ContactFormResponsesWhereInput>
    NOT?: Enumerable<ContactFormResponsesWhereInput>
    id?: IntFilter | number
    username?: StringFilter | string
    senderName?: StringFilter | string
    senderMail?: StringFilter | string
    message?: StringFilter | string
    date?: DateTimeFilter | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput> | null
  }

  export type ContactFormResponsesOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    senderName?: SortOrder
    senderMail?: SortOrder
    message?: SortOrder
    date?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type ContactFormResponsesWhereUniqueInput = {
    id?: number
  }

  export type ContactFormResponsesOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    senderName?: SortOrder
    senderMail?: SortOrder
    message?: SortOrder
    date?: SortOrder
    _count?: ContactFormResponsesCountOrderByAggregateInput
    _avg?: ContactFormResponsesAvgOrderByAggregateInput
    _max?: ContactFormResponsesMaxOrderByAggregateInput
    _min?: ContactFormResponsesMinOrderByAggregateInput
    _sum?: ContactFormResponsesSumOrderByAggregateInput
  }

  export type ContactFormResponsesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ContactFormResponsesScalarWhereWithAggregatesInput>
    OR?: Enumerable<ContactFormResponsesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ContactFormResponsesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    username?: StringWithAggregatesFilter | string
    senderName?: StringWithAggregatesFilter | string
    senderMail?: StringWithAggregatesFilter | string
    message?: StringWithAggregatesFilter | string
    date?: DateTimeWithAggregatesFilter | Date | string
  }

  export type UserCreateInput = {
    email: string
    username: string
    name?: string | null
    password: string
    address?: string | null
    photoURL?: string | null
    gender?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    shortDesc?: string | null
    about?: string | null
    phone?: string | null
    socialLinks?: SocialLinksCreateNestedManyWithoutUserInput
    projects?: ProjectsCreateNestedManyWithoutUserInput
    education?: EducationCreateNestedManyWithoutUserInput
    experience?: ExperienceCreateNestedManyWithoutUserInput
    aboutCards?: AboutCreateNestedManyWithoutUserInput
    skills?: SkillsCreateNestedManyWithoutUserInput
    contactResponses?: ContactFormResponsesCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    username: string
    name?: string | null
    password: string
    address?: string | null
    photoURL?: string | null
    gender?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    shortDesc?: string | null
    about?: string | null
    phone?: string | null
    socialLinks?: SocialLinksUncheckedCreateNestedManyWithoutUserInput
    projects?: ProjectsUncheckedCreateNestedManyWithoutUserInput
    education?: EducationUncheckedCreateNestedManyWithoutUserInput
    experience?: ExperienceUncheckedCreateNestedManyWithoutUserInput
    aboutCards?: AboutUncheckedCreateNestedManyWithoutUserInput
    skills?: SkillsUncheckedCreateNestedManyWithoutUserInput
    contactResponses?: ContactFormResponsesUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    photoURL?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    socialLinks?: SocialLinksUpdateManyWithoutUserNestedInput
    projects?: ProjectsUpdateManyWithoutUserNestedInput
    education?: EducationUpdateManyWithoutUserNestedInput
    experience?: ExperienceUpdateManyWithoutUserNestedInput
    aboutCards?: AboutUpdateManyWithoutUserNestedInput
    skills?: SkillsUpdateManyWithoutUserNestedInput
    contactResponses?: ContactFormResponsesUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    photoURL?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    socialLinks?: SocialLinksUncheckedUpdateManyWithoutUserNestedInput
    projects?: ProjectsUncheckedUpdateManyWithoutUserNestedInput
    education?: EducationUncheckedUpdateManyWithoutUserNestedInput
    experience?: ExperienceUncheckedUpdateManyWithoutUserNestedInput
    aboutCards?: AboutUncheckedUpdateManyWithoutUserNestedInput
    skills?: SkillsUncheckedUpdateManyWithoutUserNestedInput
    contactResponses?: ContactFormResponsesUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    username: string
    name?: string | null
    password: string
    address?: string | null
    photoURL?: string | null
    gender?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    shortDesc?: string | null
    about?: string | null
    phone?: string | null
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    photoURL?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    photoURL?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SocialLinksCreateInput = {
    linkName: string
    url: string
    user?: UserCreateNestedOneWithoutSocialLinksInput
  }

  export type SocialLinksUncheckedCreateInput = {
    id?: number
    username: string
    linkName: string
    url: string
  }

  export type SocialLinksUpdateInput = {
    linkName?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneWithoutSocialLinksNestedInput
  }

  export type SocialLinksUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    linkName?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type SocialLinksCreateManyInput = {
    id?: number
    username: string
    linkName: string
    url: string
  }

  export type SocialLinksUpdateManyMutationInput = {
    linkName?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type SocialLinksUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    linkName?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectsCreateInput = {
    name: string
    description: string
    liveLink: string
    github: string
    category: string
    date: Date | string
    thumbnail: string
    techUsed?: ProjectsCreatetechUsedInput | Enumerable<string>
    user?: UserCreateNestedOneWithoutProjectsInput
  }

  export type ProjectsUncheckedCreateInput = {
    id?: number
    username?: string | null
    name: string
    description: string
    liveLink: string
    github: string
    category: string
    date: Date | string
    thumbnail: string
    techUsed?: ProjectsCreatetechUsedInput | Enumerable<string>
  }

  export type ProjectsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    liveLink?: StringFieldUpdateOperationsInput | string
    github?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    techUsed?: ProjectsUpdatetechUsedInput | Enumerable<string>
    user?: UserUpdateOneWithoutProjectsNestedInput
  }

  export type ProjectsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    liveLink?: StringFieldUpdateOperationsInput | string
    github?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    techUsed?: ProjectsUpdatetechUsedInput | Enumerable<string>
  }

  export type ProjectsCreateManyInput = {
    id?: number
    username?: string | null
    name: string
    description: string
    liveLink: string
    github: string
    category: string
    date: Date | string
    thumbnail: string
    techUsed?: ProjectsCreatetechUsedInput | Enumerable<string>
  }

  export type ProjectsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    liveLink?: StringFieldUpdateOperationsInput | string
    github?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    techUsed?: ProjectsUpdatetechUsedInput | Enumerable<string>
  }

  export type ProjectsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    liveLink?: StringFieldUpdateOperationsInput | string
    github?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    techUsed?: ProjectsUpdatetechUsedInput | Enumerable<string>
  }

  export type EducationCreateInput = {
    priority: number
    from: string
    to: string
    institution: string
    description: string
    percentage: string
    user?: UserCreateNestedOneWithoutEducationInput
  }

  export type EducationUncheckedCreateInput = {
    id?: number
    username?: string | null
    priority: number
    from: string
    to: string
    institution: string
    description: string
    percentage: string
  }

  export type EducationUpdateInput = {
    priority?: IntFieldUpdateOperationsInput | number
    from?: StringFieldUpdateOperationsInput | string
    to?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    percentage?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneWithoutEducationNestedInput
  }

  export type EducationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: IntFieldUpdateOperationsInput | number
    from?: StringFieldUpdateOperationsInput | string
    to?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    percentage?: StringFieldUpdateOperationsInput | string
  }

  export type EducationCreateManyInput = {
    id?: number
    username?: string | null
    priority: number
    from: string
    to: string
    institution: string
    description: string
    percentage: string
  }

  export type EducationUpdateManyMutationInput = {
    priority?: IntFieldUpdateOperationsInput | number
    from?: StringFieldUpdateOperationsInput | string
    to?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    percentage?: StringFieldUpdateOperationsInput | string
  }

  export type EducationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: IntFieldUpdateOperationsInput | number
    from?: StringFieldUpdateOperationsInput | string
    to?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    percentage?: StringFieldUpdateOperationsInput | string
  }

  export type ExperienceCreateInput = {
    role: string
    company: string
    from: string
    to: string
    priority: number
    description: string
    user?: UserCreateNestedOneWithoutExperienceInput
  }

  export type ExperienceUncheckedCreateInput = {
    id?: number
    username: string
    role: string
    company: string
    from: string
    to: string
    priority: number
    description: string
  }

  export type ExperienceUpdateInput = {
    role?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    from?: StringFieldUpdateOperationsInput | string
    to?: StringFieldUpdateOperationsInput | string
    priority?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneWithoutExperienceNestedInput
  }

  export type ExperienceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    from?: StringFieldUpdateOperationsInput | string
    to?: StringFieldUpdateOperationsInput | string
    priority?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
  }

  export type ExperienceCreateManyInput = {
    id?: number
    username: string
    role: string
    company: string
    from: string
    to: string
    priority: number
    description: string
  }

  export type ExperienceUpdateManyMutationInput = {
    role?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    from?: StringFieldUpdateOperationsInput | string
    to?: StringFieldUpdateOperationsInput | string
    priority?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
  }

  export type ExperienceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    from?: StringFieldUpdateOperationsInput | string
    to?: StringFieldUpdateOperationsInput | string
    priority?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
  }

  export type AboutCreateInput = {
    title: string
    description: string
    user?: UserCreateNestedOneWithoutAboutCardsInput
  }

  export type AboutUncheckedCreateInput = {
    id?: number
    username: string
    title: string
    description: string
  }

  export type AboutUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneWithoutAboutCardsNestedInput
  }

  export type AboutUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type AboutCreateManyInput = {
    id?: number
    username: string
    title: string
    description: string
  }

  export type AboutUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type AboutUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type SkillsCreateInput = {
    title: string
    percentage: string
    user?: UserCreateNestedOneWithoutSkillsInput
  }

  export type SkillsUncheckedCreateInput = {
    id?: number
    username: string
    title: string
    percentage: string
  }

  export type SkillsUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    percentage?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneWithoutSkillsNestedInput
  }

  export type SkillsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    percentage?: StringFieldUpdateOperationsInput | string
  }

  export type SkillsCreateManyInput = {
    id?: number
    username: string
    title: string
    percentage: string
  }

  export type SkillsUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    percentage?: StringFieldUpdateOperationsInput | string
  }

  export type SkillsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    percentage?: StringFieldUpdateOperationsInput | string
  }

  export type ContactFormResponsesCreateInput = {
    senderName: string
    senderMail: string
    message: string
    date?: Date | string
    user?: UserCreateNestedOneWithoutContactResponsesInput
  }

  export type ContactFormResponsesUncheckedCreateInput = {
    id?: number
    username: string
    senderName: string
    senderMail: string
    message: string
    date?: Date | string
  }

  export type ContactFormResponsesUpdateInput = {
    senderName?: StringFieldUpdateOperationsInput | string
    senderMail?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutContactResponsesNestedInput
  }

  export type ContactFormResponsesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    senderName?: StringFieldUpdateOperationsInput | string
    senderMail?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContactFormResponsesCreateManyInput = {
    id?: number
    username: string
    senderName: string
    senderMail: string
    message: string
    date?: Date | string
  }

  export type ContactFormResponsesUpdateManyMutationInput = {
    senderName?: StringFieldUpdateOperationsInput | string
    senderMail?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContactFormResponsesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    senderName?: StringFieldUpdateOperationsInput | string
    senderMail?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type SocialLinksListRelationFilter = {
    every?: SocialLinksWhereInput
    some?: SocialLinksWhereInput
    none?: SocialLinksWhereInput
  }

  export type ProjectsListRelationFilter = {
    every?: ProjectsWhereInput
    some?: ProjectsWhereInput
    none?: ProjectsWhereInput
  }

  export type EducationListRelationFilter = {
    every?: EducationWhereInput
    some?: EducationWhereInput
    none?: EducationWhereInput
  }

  export type ExperienceListRelationFilter = {
    every?: ExperienceWhereInput
    some?: ExperienceWhereInput
    none?: ExperienceWhereInput
  }

  export type AboutListRelationFilter = {
    every?: AboutWhereInput
    some?: AboutWhereInput
    none?: AboutWhereInput
  }

  export type SkillsListRelationFilter = {
    every?: SkillsWhereInput
    some?: SkillsWhereInput
    none?: SkillsWhereInput
  }

  export type ContactFormResponsesListRelationFilter = {
    every?: ContactFormResponsesWhereInput
    some?: ContactFormResponsesWhereInput
    none?: ContactFormResponsesWhereInput
  }

  export type SocialLinksOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjectsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EducationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ExperienceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AboutOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SkillsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ContactFormResponsesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    name?: SortOrder
    password?: SortOrder
    address?: SortOrder
    photoURL?: SortOrder
    gender?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    shortDesc?: SortOrder
    about?: SortOrder
    phone?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    name?: SortOrder
    password?: SortOrder
    address?: SortOrder
    photoURL?: SortOrder
    gender?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    shortDesc?: SortOrder
    about?: SortOrder
    phone?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    name?: SortOrder
    password?: SortOrder
    address?: SortOrder
    photoURL?: SortOrder
    gender?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    shortDesc?: SortOrder
    about?: SortOrder
    phone?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type UserRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type SocialLinksCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    linkName?: SortOrder
    url?: SortOrder
  }

  export type SocialLinksAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SocialLinksMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    linkName?: SortOrder
    url?: SortOrder
  }

  export type SocialLinksMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    linkName?: SortOrder
    url?: SortOrder
  }

  export type SocialLinksSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableListFilter = {
    equals?: Enumerable<string> | null
    has?: string | null
    hasEvery?: Enumerable<string>
    hasSome?: Enumerable<string>
    isEmpty?: boolean
  }

  export type ProjectsCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    name?: SortOrder
    description?: SortOrder
    liveLink?: SortOrder
    github?: SortOrder
    category?: SortOrder
    date?: SortOrder
    thumbnail?: SortOrder
    techUsed?: SortOrder
  }

  export type ProjectsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ProjectsMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    name?: SortOrder
    description?: SortOrder
    liveLink?: SortOrder
    github?: SortOrder
    category?: SortOrder
    date?: SortOrder
    thumbnail?: SortOrder
  }

  export type ProjectsMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    name?: SortOrder
    description?: SortOrder
    liveLink?: SortOrder
    github?: SortOrder
    category?: SortOrder
    date?: SortOrder
    thumbnail?: SortOrder
  }

  export type ProjectsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EducationCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    priority?: SortOrder
    from?: SortOrder
    to?: SortOrder
    institution?: SortOrder
    description?: SortOrder
    percentage?: SortOrder
  }

  export type EducationAvgOrderByAggregateInput = {
    id?: SortOrder
    priority?: SortOrder
  }

  export type EducationMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    priority?: SortOrder
    from?: SortOrder
    to?: SortOrder
    institution?: SortOrder
    description?: SortOrder
    percentage?: SortOrder
  }

  export type EducationMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    priority?: SortOrder
    from?: SortOrder
    to?: SortOrder
    institution?: SortOrder
    description?: SortOrder
    percentage?: SortOrder
  }

  export type EducationSumOrderByAggregateInput = {
    id?: SortOrder
    priority?: SortOrder
  }

  export type ExperienceCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    role?: SortOrder
    company?: SortOrder
    from?: SortOrder
    to?: SortOrder
    priority?: SortOrder
    description?: SortOrder
  }

  export type ExperienceAvgOrderByAggregateInput = {
    id?: SortOrder
    priority?: SortOrder
  }

  export type ExperienceMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    role?: SortOrder
    company?: SortOrder
    from?: SortOrder
    to?: SortOrder
    priority?: SortOrder
    description?: SortOrder
  }

  export type ExperienceMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    role?: SortOrder
    company?: SortOrder
    from?: SortOrder
    to?: SortOrder
    priority?: SortOrder
    description?: SortOrder
  }

  export type ExperienceSumOrderByAggregateInput = {
    id?: SortOrder
    priority?: SortOrder
  }

  export type AboutCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    title?: SortOrder
    description?: SortOrder
  }

  export type AboutAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AboutMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    title?: SortOrder
    description?: SortOrder
  }

  export type AboutMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    title?: SortOrder
    description?: SortOrder
  }

  export type AboutSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SkillsCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    title?: SortOrder
    percentage?: SortOrder
  }

  export type SkillsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SkillsMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    title?: SortOrder
    percentage?: SortOrder
  }

  export type SkillsMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    title?: SortOrder
    percentage?: SortOrder
  }

  export type SkillsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ContactFormResponsesCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    senderName?: SortOrder
    senderMail?: SortOrder
    message?: SortOrder
    date?: SortOrder
  }

  export type ContactFormResponsesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ContactFormResponsesMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    senderName?: SortOrder
    senderMail?: SortOrder
    message?: SortOrder
    date?: SortOrder
  }

  export type ContactFormResponsesMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    senderName?: SortOrder
    senderMail?: SortOrder
    message?: SortOrder
    date?: SortOrder
  }

  export type ContactFormResponsesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SocialLinksCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SocialLinksCreateWithoutUserInput>, Enumerable<SocialLinksUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SocialLinksCreateOrConnectWithoutUserInput>
    createMany?: SocialLinksCreateManyUserInputEnvelope
    connect?: Enumerable<SocialLinksWhereUniqueInput>
  }

  export type ProjectsCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ProjectsCreateWithoutUserInput>, Enumerable<ProjectsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ProjectsCreateOrConnectWithoutUserInput>
    createMany?: ProjectsCreateManyUserInputEnvelope
    connect?: Enumerable<ProjectsWhereUniqueInput>
  }

  export type EducationCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<EducationCreateWithoutUserInput>, Enumerable<EducationUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<EducationCreateOrConnectWithoutUserInput>
    createMany?: EducationCreateManyUserInputEnvelope
    connect?: Enumerable<EducationWhereUniqueInput>
  }

  export type ExperienceCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ExperienceCreateWithoutUserInput>, Enumerable<ExperienceUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ExperienceCreateOrConnectWithoutUserInput>
    createMany?: ExperienceCreateManyUserInputEnvelope
    connect?: Enumerable<ExperienceWhereUniqueInput>
  }

  export type AboutCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<AboutCreateWithoutUserInput>, Enumerable<AboutUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AboutCreateOrConnectWithoutUserInput>
    createMany?: AboutCreateManyUserInputEnvelope
    connect?: Enumerable<AboutWhereUniqueInput>
  }

  export type SkillsCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SkillsCreateWithoutUserInput>, Enumerable<SkillsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SkillsCreateOrConnectWithoutUserInput>
    createMany?: SkillsCreateManyUserInputEnvelope
    connect?: Enumerable<SkillsWhereUniqueInput>
  }

  export type ContactFormResponsesCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ContactFormResponsesCreateWithoutUserInput>, Enumerable<ContactFormResponsesUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ContactFormResponsesCreateOrConnectWithoutUserInput>
    createMany?: ContactFormResponsesCreateManyUserInputEnvelope
    connect?: Enumerable<ContactFormResponsesWhereUniqueInput>
  }

  export type SocialLinksUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SocialLinksCreateWithoutUserInput>, Enumerable<SocialLinksUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SocialLinksCreateOrConnectWithoutUserInput>
    createMany?: SocialLinksCreateManyUserInputEnvelope
    connect?: Enumerable<SocialLinksWhereUniqueInput>
  }

  export type ProjectsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ProjectsCreateWithoutUserInput>, Enumerable<ProjectsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ProjectsCreateOrConnectWithoutUserInput>
    createMany?: ProjectsCreateManyUserInputEnvelope
    connect?: Enumerable<ProjectsWhereUniqueInput>
  }

  export type EducationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<EducationCreateWithoutUserInput>, Enumerable<EducationUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<EducationCreateOrConnectWithoutUserInput>
    createMany?: EducationCreateManyUserInputEnvelope
    connect?: Enumerable<EducationWhereUniqueInput>
  }

  export type ExperienceUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ExperienceCreateWithoutUserInput>, Enumerable<ExperienceUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ExperienceCreateOrConnectWithoutUserInput>
    createMany?: ExperienceCreateManyUserInputEnvelope
    connect?: Enumerable<ExperienceWhereUniqueInput>
  }

  export type AboutUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<AboutCreateWithoutUserInput>, Enumerable<AboutUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AboutCreateOrConnectWithoutUserInput>
    createMany?: AboutCreateManyUserInputEnvelope
    connect?: Enumerable<AboutWhereUniqueInput>
  }

  export type SkillsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SkillsCreateWithoutUserInput>, Enumerable<SkillsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SkillsCreateOrConnectWithoutUserInput>
    createMany?: SkillsCreateManyUserInputEnvelope
    connect?: Enumerable<SkillsWhereUniqueInput>
  }

  export type ContactFormResponsesUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ContactFormResponsesCreateWithoutUserInput>, Enumerable<ContactFormResponsesUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ContactFormResponsesCreateOrConnectWithoutUserInput>
    createMany?: ContactFormResponsesCreateManyUserInputEnvelope
    connect?: Enumerable<ContactFormResponsesWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type SocialLinksUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<SocialLinksCreateWithoutUserInput>, Enumerable<SocialLinksUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SocialLinksCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SocialLinksUpsertWithWhereUniqueWithoutUserInput>
    createMany?: SocialLinksCreateManyUserInputEnvelope
    set?: Enumerable<SocialLinksWhereUniqueInput>
    disconnect?: Enumerable<SocialLinksWhereUniqueInput>
    delete?: Enumerable<SocialLinksWhereUniqueInput>
    connect?: Enumerable<SocialLinksWhereUniqueInput>
    update?: Enumerable<SocialLinksUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SocialLinksUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SocialLinksScalarWhereInput>
  }

  export type ProjectsUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ProjectsCreateWithoutUserInput>, Enumerable<ProjectsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ProjectsCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ProjectsUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ProjectsCreateManyUserInputEnvelope
    set?: Enumerable<ProjectsWhereUniqueInput>
    disconnect?: Enumerable<ProjectsWhereUniqueInput>
    delete?: Enumerable<ProjectsWhereUniqueInput>
    connect?: Enumerable<ProjectsWhereUniqueInput>
    update?: Enumerable<ProjectsUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ProjectsUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ProjectsScalarWhereInput>
  }

  export type EducationUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<EducationCreateWithoutUserInput>, Enumerable<EducationUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<EducationCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<EducationUpsertWithWhereUniqueWithoutUserInput>
    createMany?: EducationCreateManyUserInputEnvelope
    set?: Enumerable<EducationWhereUniqueInput>
    disconnect?: Enumerable<EducationWhereUniqueInput>
    delete?: Enumerable<EducationWhereUniqueInput>
    connect?: Enumerable<EducationWhereUniqueInput>
    update?: Enumerable<EducationUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<EducationUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<EducationScalarWhereInput>
  }

  export type ExperienceUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ExperienceCreateWithoutUserInput>, Enumerable<ExperienceUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ExperienceCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ExperienceUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ExperienceCreateManyUserInputEnvelope
    set?: Enumerable<ExperienceWhereUniqueInput>
    disconnect?: Enumerable<ExperienceWhereUniqueInput>
    delete?: Enumerable<ExperienceWhereUniqueInput>
    connect?: Enumerable<ExperienceWhereUniqueInput>
    update?: Enumerable<ExperienceUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ExperienceUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ExperienceScalarWhereInput>
  }

  export type AboutUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<AboutCreateWithoutUserInput>, Enumerable<AboutUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AboutCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<AboutUpsertWithWhereUniqueWithoutUserInput>
    createMany?: AboutCreateManyUserInputEnvelope
    set?: Enumerable<AboutWhereUniqueInput>
    disconnect?: Enumerable<AboutWhereUniqueInput>
    delete?: Enumerable<AboutWhereUniqueInput>
    connect?: Enumerable<AboutWhereUniqueInput>
    update?: Enumerable<AboutUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<AboutUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<AboutScalarWhereInput>
  }

  export type SkillsUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<SkillsCreateWithoutUserInput>, Enumerable<SkillsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SkillsCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SkillsUpsertWithWhereUniqueWithoutUserInput>
    createMany?: SkillsCreateManyUserInputEnvelope
    set?: Enumerable<SkillsWhereUniqueInput>
    disconnect?: Enumerable<SkillsWhereUniqueInput>
    delete?: Enumerable<SkillsWhereUniqueInput>
    connect?: Enumerable<SkillsWhereUniqueInput>
    update?: Enumerable<SkillsUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SkillsUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SkillsScalarWhereInput>
  }

  export type ContactFormResponsesUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ContactFormResponsesCreateWithoutUserInput>, Enumerable<ContactFormResponsesUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ContactFormResponsesCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ContactFormResponsesUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ContactFormResponsesCreateManyUserInputEnvelope
    set?: Enumerable<ContactFormResponsesWhereUniqueInput>
    disconnect?: Enumerable<ContactFormResponsesWhereUniqueInput>
    delete?: Enumerable<ContactFormResponsesWhereUniqueInput>
    connect?: Enumerable<ContactFormResponsesWhereUniqueInput>
    update?: Enumerable<ContactFormResponsesUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ContactFormResponsesUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ContactFormResponsesScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SocialLinksUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<SocialLinksCreateWithoutUserInput>, Enumerable<SocialLinksUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SocialLinksCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SocialLinksUpsertWithWhereUniqueWithoutUserInput>
    createMany?: SocialLinksCreateManyUserInputEnvelope
    set?: Enumerable<SocialLinksWhereUniqueInput>
    disconnect?: Enumerable<SocialLinksWhereUniqueInput>
    delete?: Enumerable<SocialLinksWhereUniqueInput>
    connect?: Enumerable<SocialLinksWhereUniqueInput>
    update?: Enumerable<SocialLinksUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SocialLinksUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SocialLinksScalarWhereInput>
  }

  export type ProjectsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ProjectsCreateWithoutUserInput>, Enumerable<ProjectsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ProjectsCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ProjectsUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ProjectsCreateManyUserInputEnvelope
    set?: Enumerable<ProjectsWhereUniqueInput>
    disconnect?: Enumerable<ProjectsWhereUniqueInput>
    delete?: Enumerable<ProjectsWhereUniqueInput>
    connect?: Enumerable<ProjectsWhereUniqueInput>
    update?: Enumerable<ProjectsUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ProjectsUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ProjectsScalarWhereInput>
  }

  export type EducationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<EducationCreateWithoutUserInput>, Enumerable<EducationUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<EducationCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<EducationUpsertWithWhereUniqueWithoutUserInput>
    createMany?: EducationCreateManyUserInputEnvelope
    set?: Enumerable<EducationWhereUniqueInput>
    disconnect?: Enumerable<EducationWhereUniqueInput>
    delete?: Enumerable<EducationWhereUniqueInput>
    connect?: Enumerable<EducationWhereUniqueInput>
    update?: Enumerable<EducationUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<EducationUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<EducationScalarWhereInput>
  }

  export type ExperienceUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ExperienceCreateWithoutUserInput>, Enumerable<ExperienceUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ExperienceCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ExperienceUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ExperienceCreateManyUserInputEnvelope
    set?: Enumerable<ExperienceWhereUniqueInput>
    disconnect?: Enumerable<ExperienceWhereUniqueInput>
    delete?: Enumerable<ExperienceWhereUniqueInput>
    connect?: Enumerable<ExperienceWhereUniqueInput>
    update?: Enumerable<ExperienceUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ExperienceUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ExperienceScalarWhereInput>
  }

  export type AboutUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<AboutCreateWithoutUserInput>, Enumerable<AboutUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AboutCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<AboutUpsertWithWhereUniqueWithoutUserInput>
    createMany?: AboutCreateManyUserInputEnvelope
    set?: Enumerable<AboutWhereUniqueInput>
    disconnect?: Enumerable<AboutWhereUniqueInput>
    delete?: Enumerable<AboutWhereUniqueInput>
    connect?: Enumerable<AboutWhereUniqueInput>
    update?: Enumerable<AboutUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<AboutUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<AboutScalarWhereInput>
  }

  export type SkillsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<SkillsCreateWithoutUserInput>, Enumerable<SkillsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SkillsCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SkillsUpsertWithWhereUniqueWithoutUserInput>
    createMany?: SkillsCreateManyUserInputEnvelope
    set?: Enumerable<SkillsWhereUniqueInput>
    disconnect?: Enumerable<SkillsWhereUniqueInput>
    delete?: Enumerable<SkillsWhereUniqueInput>
    connect?: Enumerable<SkillsWhereUniqueInput>
    update?: Enumerable<SkillsUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SkillsUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SkillsScalarWhereInput>
  }

  export type ContactFormResponsesUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ContactFormResponsesCreateWithoutUserInput>, Enumerable<ContactFormResponsesUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ContactFormResponsesCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ContactFormResponsesUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ContactFormResponsesCreateManyUserInputEnvelope
    set?: Enumerable<ContactFormResponsesWhereUniqueInput>
    disconnect?: Enumerable<ContactFormResponsesWhereUniqueInput>
    delete?: Enumerable<ContactFormResponsesWhereUniqueInput>
    connect?: Enumerable<ContactFormResponsesWhereUniqueInput>
    update?: Enumerable<ContactFormResponsesUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ContactFormResponsesUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ContactFormResponsesScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutSocialLinksInput = {
    create?: XOR<UserCreateWithoutSocialLinksInput, UserUncheckedCreateWithoutSocialLinksInput>
    connectOrCreate?: UserCreateOrConnectWithoutSocialLinksInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutSocialLinksNestedInput = {
    create?: XOR<UserCreateWithoutSocialLinksInput, UserUncheckedCreateWithoutSocialLinksInput>
    connectOrCreate?: UserCreateOrConnectWithoutSocialLinksInput
    upsert?: UserUpsertWithoutSocialLinksInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutSocialLinksInput, UserUncheckedUpdateWithoutSocialLinksInput>
  }

  export type ProjectsCreatetechUsedInput = {
    set: Enumerable<string>
  }

  export type UserCreateNestedOneWithoutProjectsInput = {
    create?: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProjectsInput
    connect?: UserWhereUniqueInput
  }

  export type ProjectsUpdatetechUsedInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type UserUpdateOneWithoutProjectsNestedInput = {
    create?: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProjectsInput
    upsert?: UserUpsertWithoutProjectsInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutProjectsInput, UserUncheckedUpdateWithoutProjectsInput>
  }

  export type UserCreateNestedOneWithoutEducationInput = {
    create?: XOR<UserCreateWithoutEducationInput, UserUncheckedCreateWithoutEducationInput>
    connectOrCreate?: UserCreateOrConnectWithoutEducationInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutEducationNestedInput = {
    create?: XOR<UserCreateWithoutEducationInput, UserUncheckedCreateWithoutEducationInput>
    connectOrCreate?: UserCreateOrConnectWithoutEducationInput
    upsert?: UserUpsertWithoutEducationInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutEducationInput, UserUncheckedUpdateWithoutEducationInput>
  }

  export type UserCreateNestedOneWithoutExperienceInput = {
    create?: XOR<UserCreateWithoutExperienceInput, UserUncheckedCreateWithoutExperienceInput>
    connectOrCreate?: UserCreateOrConnectWithoutExperienceInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutExperienceNestedInput = {
    create?: XOR<UserCreateWithoutExperienceInput, UserUncheckedCreateWithoutExperienceInput>
    connectOrCreate?: UserCreateOrConnectWithoutExperienceInput
    upsert?: UserUpsertWithoutExperienceInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutExperienceInput, UserUncheckedUpdateWithoutExperienceInput>
  }

  export type UserCreateNestedOneWithoutAboutCardsInput = {
    create?: XOR<UserCreateWithoutAboutCardsInput, UserUncheckedCreateWithoutAboutCardsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAboutCardsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutAboutCardsNestedInput = {
    create?: XOR<UserCreateWithoutAboutCardsInput, UserUncheckedCreateWithoutAboutCardsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAboutCardsInput
    upsert?: UserUpsertWithoutAboutCardsInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutAboutCardsInput, UserUncheckedUpdateWithoutAboutCardsInput>
  }

  export type UserCreateNestedOneWithoutSkillsInput = {
    create?: XOR<UserCreateWithoutSkillsInput, UserUncheckedCreateWithoutSkillsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSkillsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutSkillsNestedInput = {
    create?: XOR<UserCreateWithoutSkillsInput, UserUncheckedCreateWithoutSkillsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSkillsInput
    upsert?: UserUpsertWithoutSkillsInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutSkillsInput, UserUncheckedUpdateWithoutSkillsInput>
  }

  export type UserCreateNestedOneWithoutContactResponsesInput = {
    create?: XOR<UserCreateWithoutContactResponsesInput, UserUncheckedCreateWithoutContactResponsesInput>
    connectOrCreate?: UserCreateOrConnectWithoutContactResponsesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutContactResponsesNestedInput = {
    create?: XOR<UserCreateWithoutContactResponsesInput, UserUncheckedCreateWithoutContactResponsesInput>
    connectOrCreate?: UserCreateOrConnectWithoutContactResponsesInput
    upsert?: UserUpsertWithoutContactResponsesInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutContactResponsesInput, UserUncheckedUpdateWithoutContactResponsesInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type SocialLinksCreateWithoutUserInput = {
    linkName: string
    url: string
  }

  export type SocialLinksUncheckedCreateWithoutUserInput = {
    id?: number
    linkName: string
    url: string
  }

  export type SocialLinksCreateOrConnectWithoutUserInput = {
    where: SocialLinksWhereUniqueInput
    create: XOR<SocialLinksCreateWithoutUserInput, SocialLinksUncheckedCreateWithoutUserInput>
  }

  export type SocialLinksCreateManyUserInputEnvelope = {
    data: Enumerable<SocialLinksCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type ProjectsCreateWithoutUserInput = {
    name: string
    description: string
    liveLink: string
    github: string
    category: string
    date: Date | string
    thumbnail: string
    techUsed?: ProjectsCreatetechUsedInput | Enumerable<string>
  }

  export type ProjectsUncheckedCreateWithoutUserInput = {
    id?: number
    name: string
    description: string
    liveLink: string
    github: string
    category: string
    date: Date | string
    thumbnail: string
    techUsed?: ProjectsCreatetechUsedInput | Enumerable<string>
  }

  export type ProjectsCreateOrConnectWithoutUserInput = {
    where: ProjectsWhereUniqueInput
    create: XOR<ProjectsCreateWithoutUserInput, ProjectsUncheckedCreateWithoutUserInput>
  }

  export type ProjectsCreateManyUserInputEnvelope = {
    data: Enumerable<ProjectsCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type EducationCreateWithoutUserInput = {
    priority: number
    from: string
    to: string
    institution: string
    description: string
    percentage: string
  }

  export type EducationUncheckedCreateWithoutUserInput = {
    id?: number
    priority: number
    from: string
    to: string
    institution: string
    description: string
    percentage: string
  }

  export type EducationCreateOrConnectWithoutUserInput = {
    where: EducationWhereUniqueInput
    create: XOR<EducationCreateWithoutUserInput, EducationUncheckedCreateWithoutUserInput>
  }

  export type EducationCreateManyUserInputEnvelope = {
    data: Enumerable<EducationCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type ExperienceCreateWithoutUserInput = {
    role: string
    company: string
    from: string
    to: string
    priority: number
    description: string
  }

  export type ExperienceUncheckedCreateWithoutUserInput = {
    id?: number
    role: string
    company: string
    from: string
    to: string
    priority: number
    description: string
  }

  export type ExperienceCreateOrConnectWithoutUserInput = {
    where: ExperienceWhereUniqueInput
    create: XOR<ExperienceCreateWithoutUserInput, ExperienceUncheckedCreateWithoutUserInput>
  }

  export type ExperienceCreateManyUserInputEnvelope = {
    data: Enumerable<ExperienceCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type AboutCreateWithoutUserInput = {
    title: string
    description: string
  }

  export type AboutUncheckedCreateWithoutUserInput = {
    id?: number
    title: string
    description: string
  }

  export type AboutCreateOrConnectWithoutUserInput = {
    where: AboutWhereUniqueInput
    create: XOR<AboutCreateWithoutUserInput, AboutUncheckedCreateWithoutUserInput>
  }

  export type AboutCreateManyUserInputEnvelope = {
    data: Enumerable<AboutCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type SkillsCreateWithoutUserInput = {
    title: string
    percentage: string
  }

  export type SkillsUncheckedCreateWithoutUserInput = {
    id?: number
    title: string
    percentage: string
  }

  export type SkillsCreateOrConnectWithoutUserInput = {
    where: SkillsWhereUniqueInput
    create: XOR<SkillsCreateWithoutUserInput, SkillsUncheckedCreateWithoutUserInput>
  }

  export type SkillsCreateManyUserInputEnvelope = {
    data: Enumerable<SkillsCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type ContactFormResponsesCreateWithoutUserInput = {
    senderName: string
    senderMail: string
    message: string
    date?: Date | string
  }

  export type ContactFormResponsesUncheckedCreateWithoutUserInput = {
    id?: number
    senderName: string
    senderMail: string
    message: string
    date?: Date | string
  }

  export type ContactFormResponsesCreateOrConnectWithoutUserInput = {
    where: ContactFormResponsesWhereUniqueInput
    create: XOR<ContactFormResponsesCreateWithoutUserInput, ContactFormResponsesUncheckedCreateWithoutUserInput>
  }

  export type ContactFormResponsesCreateManyUserInputEnvelope = {
    data: Enumerable<ContactFormResponsesCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type SocialLinksUpsertWithWhereUniqueWithoutUserInput = {
    where: SocialLinksWhereUniqueInput
    update: XOR<SocialLinksUpdateWithoutUserInput, SocialLinksUncheckedUpdateWithoutUserInput>
    create: XOR<SocialLinksCreateWithoutUserInput, SocialLinksUncheckedCreateWithoutUserInput>
  }

  export type SocialLinksUpdateWithWhereUniqueWithoutUserInput = {
    where: SocialLinksWhereUniqueInput
    data: XOR<SocialLinksUpdateWithoutUserInput, SocialLinksUncheckedUpdateWithoutUserInput>
  }

  export type SocialLinksUpdateManyWithWhereWithoutUserInput = {
    where: SocialLinksScalarWhereInput
    data: XOR<SocialLinksUpdateManyMutationInput, SocialLinksUncheckedUpdateManyWithoutSocialLinksInput>
  }

  export type SocialLinksScalarWhereInput = {
    AND?: Enumerable<SocialLinksScalarWhereInput>
    OR?: Enumerable<SocialLinksScalarWhereInput>
    NOT?: Enumerable<SocialLinksScalarWhereInput>
    id?: IntFilter | number
    username?: StringFilter | string
    linkName?: StringFilter | string
    url?: StringFilter | string
  }

  export type ProjectsUpsertWithWhereUniqueWithoutUserInput = {
    where: ProjectsWhereUniqueInput
    update: XOR<ProjectsUpdateWithoutUserInput, ProjectsUncheckedUpdateWithoutUserInput>
    create: XOR<ProjectsCreateWithoutUserInput, ProjectsUncheckedCreateWithoutUserInput>
  }

  export type ProjectsUpdateWithWhereUniqueWithoutUserInput = {
    where: ProjectsWhereUniqueInput
    data: XOR<ProjectsUpdateWithoutUserInput, ProjectsUncheckedUpdateWithoutUserInput>
  }

  export type ProjectsUpdateManyWithWhereWithoutUserInput = {
    where: ProjectsScalarWhereInput
    data: XOR<ProjectsUpdateManyMutationInput, ProjectsUncheckedUpdateManyWithoutProjectsInput>
  }

  export type ProjectsScalarWhereInput = {
    AND?: Enumerable<ProjectsScalarWhereInput>
    OR?: Enumerable<ProjectsScalarWhereInput>
    NOT?: Enumerable<ProjectsScalarWhereInput>
    id?: IntFilter | number
    username?: StringNullableFilter | string | null
    name?: StringFilter | string
    description?: StringFilter | string
    liveLink?: StringFilter | string
    github?: StringFilter | string
    category?: StringFilter | string
    date?: DateTimeFilter | Date | string
    thumbnail?: StringFilter | string
    techUsed?: StringNullableListFilter
  }

  export type EducationUpsertWithWhereUniqueWithoutUserInput = {
    where: EducationWhereUniqueInput
    update: XOR<EducationUpdateWithoutUserInput, EducationUncheckedUpdateWithoutUserInput>
    create: XOR<EducationCreateWithoutUserInput, EducationUncheckedCreateWithoutUserInput>
  }

  export type EducationUpdateWithWhereUniqueWithoutUserInput = {
    where: EducationWhereUniqueInput
    data: XOR<EducationUpdateWithoutUserInput, EducationUncheckedUpdateWithoutUserInput>
  }

  export type EducationUpdateManyWithWhereWithoutUserInput = {
    where: EducationScalarWhereInput
    data: XOR<EducationUpdateManyMutationInput, EducationUncheckedUpdateManyWithoutEducationInput>
  }

  export type EducationScalarWhereInput = {
    AND?: Enumerable<EducationScalarWhereInput>
    OR?: Enumerable<EducationScalarWhereInput>
    NOT?: Enumerable<EducationScalarWhereInput>
    id?: IntFilter | number
    username?: StringNullableFilter | string | null
    priority?: IntFilter | number
    from?: StringFilter | string
    to?: StringFilter | string
    institution?: StringFilter | string
    description?: StringFilter | string
    percentage?: StringFilter | string
  }

  export type ExperienceUpsertWithWhereUniqueWithoutUserInput = {
    where: ExperienceWhereUniqueInput
    update: XOR<ExperienceUpdateWithoutUserInput, ExperienceUncheckedUpdateWithoutUserInput>
    create: XOR<ExperienceCreateWithoutUserInput, ExperienceUncheckedCreateWithoutUserInput>
  }

  export type ExperienceUpdateWithWhereUniqueWithoutUserInput = {
    where: ExperienceWhereUniqueInput
    data: XOR<ExperienceUpdateWithoutUserInput, ExperienceUncheckedUpdateWithoutUserInput>
  }

  export type ExperienceUpdateManyWithWhereWithoutUserInput = {
    where: ExperienceScalarWhereInput
    data: XOR<ExperienceUpdateManyMutationInput, ExperienceUncheckedUpdateManyWithoutExperienceInput>
  }

  export type ExperienceScalarWhereInput = {
    AND?: Enumerable<ExperienceScalarWhereInput>
    OR?: Enumerable<ExperienceScalarWhereInput>
    NOT?: Enumerable<ExperienceScalarWhereInput>
    id?: IntFilter | number
    username?: StringFilter | string
    role?: StringFilter | string
    company?: StringFilter | string
    from?: StringFilter | string
    to?: StringFilter | string
    priority?: IntFilter | number
    description?: StringFilter | string
  }

  export type AboutUpsertWithWhereUniqueWithoutUserInput = {
    where: AboutWhereUniqueInput
    update: XOR<AboutUpdateWithoutUserInput, AboutUncheckedUpdateWithoutUserInput>
    create: XOR<AboutCreateWithoutUserInput, AboutUncheckedCreateWithoutUserInput>
  }

  export type AboutUpdateWithWhereUniqueWithoutUserInput = {
    where: AboutWhereUniqueInput
    data: XOR<AboutUpdateWithoutUserInput, AboutUncheckedUpdateWithoutUserInput>
  }

  export type AboutUpdateManyWithWhereWithoutUserInput = {
    where: AboutScalarWhereInput
    data: XOR<AboutUpdateManyMutationInput, AboutUncheckedUpdateManyWithoutAboutCardsInput>
  }

  export type AboutScalarWhereInput = {
    AND?: Enumerable<AboutScalarWhereInput>
    OR?: Enumerable<AboutScalarWhereInput>
    NOT?: Enumerable<AboutScalarWhereInput>
    id?: IntFilter | number
    username?: StringFilter | string
    title?: StringFilter | string
    description?: StringFilter | string
  }

  export type SkillsUpsertWithWhereUniqueWithoutUserInput = {
    where: SkillsWhereUniqueInput
    update: XOR<SkillsUpdateWithoutUserInput, SkillsUncheckedUpdateWithoutUserInput>
    create: XOR<SkillsCreateWithoutUserInput, SkillsUncheckedCreateWithoutUserInput>
  }

  export type SkillsUpdateWithWhereUniqueWithoutUserInput = {
    where: SkillsWhereUniqueInput
    data: XOR<SkillsUpdateWithoutUserInput, SkillsUncheckedUpdateWithoutUserInput>
  }

  export type SkillsUpdateManyWithWhereWithoutUserInput = {
    where: SkillsScalarWhereInput
    data: XOR<SkillsUpdateManyMutationInput, SkillsUncheckedUpdateManyWithoutSkillsInput>
  }

  export type SkillsScalarWhereInput = {
    AND?: Enumerable<SkillsScalarWhereInput>
    OR?: Enumerable<SkillsScalarWhereInput>
    NOT?: Enumerable<SkillsScalarWhereInput>
    id?: IntFilter | number
    username?: StringFilter | string
    title?: StringFilter | string
    percentage?: StringFilter | string
  }

  export type ContactFormResponsesUpsertWithWhereUniqueWithoutUserInput = {
    where: ContactFormResponsesWhereUniqueInput
    update: XOR<ContactFormResponsesUpdateWithoutUserInput, ContactFormResponsesUncheckedUpdateWithoutUserInput>
    create: XOR<ContactFormResponsesCreateWithoutUserInput, ContactFormResponsesUncheckedCreateWithoutUserInput>
  }

  export type ContactFormResponsesUpdateWithWhereUniqueWithoutUserInput = {
    where: ContactFormResponsesWhereUniqueInput
    data: XOR<ContactFormResponsesUpdateWithoutUserInput, ContactFormResponsesUncheckedUpdateWithoutUserInput>
  }

  export type ContactFormResponsesUpdateManyWithWhereWithoutUserInput = {
    where: ContactFormResponsesScalarWhereInput
    data: XOR<ContactFormResponsesUpdateManyMutationInput, ContactFormResponsesUncheckedUpdateManyWithoutContactResponsesInput>
  }

  export type ContactFormResponsesScalarWhereInput = {
    AND?: Enumerable<ContactFormResponsesScalarWhereInput>
    OR?: Enumerable<ContactFormResponsesScalarWhereInput>
    NOT?: Enumerable<ContactFormResponsesScalarWhereInput>
    id?: IntFilter | number
    username?: StringFilter | string
    senderName?: StringFilter | string
    senderMail?: StringFilter | string
    message?: StringFilter | string
    date?: DateTimeFilter | Date | string
  }

  export type UserCreateWithoutSocialLinksInput = {
    email: string
    username: string
    name?: string | null
    password: string
    address?: string | null
    photoURL?: string | null
    gender?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    shortDesc?: string | null
    about?: string | null
    phone?: string | null
    projects?: ProjectsCreateNestedManyWithoutUserInput
    education?: EducationCreateNestedManyWithoutUserInput
    experience?: ExperienceCreateNestedManyWithoutUserInput
    aboutCards?: AboutCreateNestedManyWithoutUserInput
    skills?: SkillsCreateNestedManyWithoutUserInput
    contactResponses?: ContactFormResponsesCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSocialLinksInput = {
    id?: number
    email: string
    username: string
    name?: string | null
    password: string
    address?: string | null
    photoURL?: string | null
    gender?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    shortDesc?: string | null
    about?: string | null
    phone?: string | null
    projects?: ProjectsUncheckedCreateNestedManyWithoutUserInput
    education?: EducationUncheckedCreateNestedManyWithoutUserInput
    experience?: ExperienceUncheckedCreateNestedManyWithoutUserInput
    aboutCards?: AboutUncheckedCreateNestedManyWithoutUserInput
    skills?: SkillsUncheckedCreateNestedManyWithoutUserInput
    contactResponses?: ContactFormResponsesUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSocialLinksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSocialLinksInput, UserUncheckedCreateWithoutSocialLinksInput>
  }

  export type UserUpsertWithoutSocialLinksInput = {
    update: XOR<UserUpdateWithoutSocialLinksInput, UserUncheckedUpdateWithoutSocialLinksInput>
    create: XOR<UserCreateWithoutSocialLinksInput, UserUncheckedCreateWithoutSocialLinksInput>
  }

  export type UserUpdateWithoutSocialLinksInput = {
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    photoURL?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    projects?: ProjectsUpdateManyWithoutUserNestedInput
    education?: EducationUpdateManyWithoutUserNestedInput
    experience?: ExperienceUpdateManyWithoutUserNestedInput
    aboutCards?: AboutUpdateManyWithoutUserNestedInput
    skills?: SkillsUpdateManyWithoutUserNestedInput
    contactResponses?: ContactFormResponsesUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSocialLinksInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    photoURL?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    projects?: ProjectsUncheckedUpdateManyWithoutUserNestedInput
    education?: EducationUncheckedUpdateManyWithoutUserNestedInput
    experience?: ExperienceUncheckedUpdateManyWithoutUserNestedInput
    aboutCards?: AboutUncheckedUpdateManyWithoutUserNestedInput
    skills?: SkillsUncheckedUpdateManyWithoutUserNestedInput
    contactResponses?: ContactFormResponsesUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutProjectsInput = {
    email: string
    username: string
    name?: string | null
    password: string
    address?: string | null
    photoURL?: string | null
    gender?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    shortDesc?: string | null
    about?: string | null
    phone?: string | null
    socialLinks?: SocialLinksCreateNestedManyWithoutUserInput
    education?: EducationCreateNestedManyWithoutUserInput
    experience?: ExperienceCreateNestedManyWithoutUserInput
    aboutCards?: AboutCreateNestedManyWithoutUserInput
    skills?: SkillsCreateNestedManyWithoutUserInput
    contactResponses?: ContactFormResponsesCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProjectsInput = {
    id?: number
    email: string
    username: string
    name?: string | null
    password: string
    address?: string | null
    photoURL?: string | null
    gender?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    shortDesc?: string | null
    about?: string | null
    phone?: string | null
    socialLinks?: SocialLinksUncheckedCreateNestedManyWithoutUserInput
    education?: EducationUncheckedCreateNestedManyWithoutUserInput
    experience?: ExperienceUncheckedCreateNestedManyWithoutUserInput
    aboutCards?: AboutUncheckedCreateNestedManyWithoutUserInput
    skills?: SkillsUncheckedCreateNestedManyWithoutUserInput
    contactResponses?: ContactFormResponsesUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProjectsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput>
  }

  export type UserUpsertWithoutProjectsInput = {
    update: XOR<UserUpdateWithoutProjectsInput, UserUncheckedUpdateWithoutProjectsInput>
    create: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput>
  }

  export type UserUpdateWithoutProjectsInput = {
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    photoURL?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    socialLinks?: SocialLinksUpdateManyWithoutUserNestedInput
    education?: EducationUpdateManyWithoutUserNestedInput
    experience?: ExperienceUpdateManyWithoutUserNestedInput
    aboutCards?: AboutUpdateManyWithoutUserNestedInput
    skills?: SkillsUpdateManyWithoutUserNestedInput
    contactResponses?: ContactFormResponsesUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    photoURL?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    socialLinks?: SocialLinksUncheckedUpdateManyWithoutUserNestedInput
    education?: EducationUncheckedUpdateManyWithoutUserNestedInput
    experience?: ExperienceUncheckedUpdateManyWithoutUserNestedInput
    aboutCards?: AboutUncheckedUpdateManyWithoutUserNestedInput
    skills?: SkillsUncheckedUpdateManyWithoutUserNestedInput
    contactResponses?: ContactFormResponsesUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutEducationInput = {
    email: string
    username: string
    name?: string | null
    password: string
    address?: string | null
    photoURL?: string | null
    gender?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    shortDesc?: string | null
    about?: string | null
    phone?: string | null
    socialLinks?: SocialLinksCreateNestedManyWithoutUserInput
    projects?: ProjectsCreateNestedManyWithoutUserInput
    experience?: ExperienceCreateNestedManyWithoutUserInput
    aboutCards?: AboutCreateNestedManyWithoutUserInput
    skills?: SkillsCreateNestedManyWithoutUserInput
    contactResponses?: ContactFormResponsesCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutEducationInput = {
    id?: number
    email: string
    username: string
    name?: string | null
    password: string
    address?: string | null
    photoURL?: string | null
    gender?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    shortDesc?: string | null
    about?: string | null
    phone?: string | null
    socialLinks?: SocialLinksUncheckedCreateNestedManyWithoutUserInput
    projects?: ProjectsUncheckedCreateNestedManyWithoutUserInput
    experience?: ExperienceUncheckedCreateNestedManyWithoutUserInput
    aboutCards?: AboutUncheckedCreateNestedManyWithoutUserInput
    skills?: SkillsUncheckedCreateNestedManyWithoutUserInput
    contactResponses?: ContactFormResponsesUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutEducationInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEducationInput, UserUncheckedCreateWithoutEducationInput>
  }

  export type UserUpsertWithoutEducationInput = {
    update: XOR<UserUpdateWithoutEducationInput, UserUncheckedUpdateWithoutEducationInput>
    create: XOR<UserCreateWithoutEducationInput, UserUncheckedCreateWithoutEducationInput>
  }

  export type UserUpdateWithoutEducationInput = {
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    photoURL?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    socialLinks?: SocialLinksUpdateManyWithoutUserNestedInput
    projects?: ProjectsUpdateManyWithoutUserNestedInput
    experience?: ExperienceUpdateManyWithoutUserNestedInput
    aboutCards?: AboutUpdateManyWithoutUserNestedInput
    skills?: SkillsUpdateManyWithoutUserNestedInput
    contactResponses?: ContactFormResponsesUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutEducationInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    photoURL?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    socialLinks?: SocialLinksUncheckedUpdateManyWithoutUserNestedInput
    projects?: ProjectsUncheckedUpdateManyWithoutUserNestedInput
    experience?: ExperienceUncheckedUpdateManyWithoutUserNestedInput
    aboutCards?: AboutUncheckedUpdateManyWithoutUserNestedInput
    skills?: SkillsUncheckedUpdateManyWithoutUserNestedInput
    contactResponses?: ContactFormResponsesUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutExperienceInput = {
    email: string
    username: string
    name?: string | null
    password: string
    address?: string | null
    photoURL?: string | null
    gender?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    shortDesc?: string | null
    about?: string | null
    phone?: string | null
    socialLinks?: SocialLinksCreateNestedManyWithoutUserInput
    projects?: ProjectsCreateNestedManyWithoutUserInput
    education?: EducationCreateNestedManyWithoutUserInput
    aboutCards?: AboutCreateNestedManyWithoutUserInput
    skills?: SkillsCreateNestedManyWithoutUserInput
    contactResponses?: ContactFormResponsesCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutExperienceInput = {
    id?: number
    email: string
    username: string
    name?: string | null
    password: string
    address?: string | null
    photoURL?: string | null
    gender?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    shortDesc?: string | null
    about?: string | null
    phone?: string | null
    socialLinks?: SocialLinksUncheckedCreateNestedManyWithoutUserInput
    projects?: ProjectsUncheckedCreateNestedManyWithoutUserInput
    education?: EducationUncheckedCreateNestedManyWithoutUserInput
    aboutCards?: AboutUncheckedCreateNestedManyWithoutUserInput
    skills?: SkillsUncheckedCreateNestedManyWithoutUserInput
    contactResponses?: ContactFormResponsesUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutExperienceInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutExperienceInput, UserUncheckedCreateWithoutExperienceInput>
  }

  export type UserUpsertWithoutExperienceInput = {
    update: XOR<UserUpdateWithoutExperienceInput, UserUncheckedUpdateWithoutExperienceInput>
    create: XOR<UserCreateWithoutExperienceInput, UserUncheckedCreateWithoutExperienceInput>
  }

  export type UserUpdateWithoutExperienceInput = {
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    photoURL?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    socialLinks?: SocialLinksUpdateManyWithoutUserNestedInput
    projects?: ProjectsUpdateManyWithoutUserNestedInput
    education?: EducationUpdateManyWithoutUserNestedInput
    aboutCards?: AboutUpdateManyWithoutUserNestedInput
    skills?: SkillsUpdateManyWithoutUserNestedInput
    contactResponses?: ContactFormResponsesUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutExperienceInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    photoURL?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    socialLinks?: SocialLinksUncheckedUpdateManyWithoutUserNestedInput
    projects?: ProjectsUncheckedUpdateManyWithoutUserNestedInput
    education?: EducationUncheckedUpdateManyWithoutUserNestedInput
    aboutCards?: AboutUncheckedUpdateManyWithoutUserNestedInput
    skills?: SkillsUncheckedUpdateManyWithoutUserNestedInput
    contactResponses?: ContactFormResponsesUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutAboutCardsInput = {
    email: string
    username: string
    name?: string | null
    password: string
    address?: string | null
    photoURL?: string | null
    gender?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    shortDesc?: string | null
    about?: string | null
    phone?: string | null
    socialLinks?: SocialLinksCreateNestedManyWithoutUserInput
    projects?: ProjectsCreateNestedManyWithoutUserInput
    education?: EducationCreateNestedManyWithoutUserInput
    experience?: ExperienceCreateNestedManyWithoutUserInput
    skills?: SkillsCreateNestedManyWithoutUserInput
    contactResponses?: ContactFormResponsesCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAboutCardsInput = {
    id?: number
    email: string
    username: string
    name?: string | null
    password: string
    address?: string | null
    photoURL?: string | null
    gender?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    shortDesc?: string | null
    about?: string | null
    phone?: string | null
    socialLinks?: SocialLinksUncheckedCreateNestedManyWithoutUserInput
    projects?: ProjectsUncheckedCreateNestedManyWithoutUserInput
    education?: EducationUncheckedCreateNestedManyWithoutUserInput
    experience?: ExperienceUncheckedCreateNestedManyWithoutUserInput
    skills?: SkillsUncheckedCreateNestedManyWithoutUserInput
    contactResponses?: ContactFormResponsesUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAboutCardsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAboutCardsInput, UserUncheckedCreateWithoutAboutCardsInput>
  }

  export type UserUpsertWithoutAboutCardsInput = {
    update: XOR<UserUpdateWithoutAboutCardsInput, UserUncheckedUpdateWithoutAboutCardsInput>
    create: XOR<UserCreateWithoutAboutCardsInput, UserUncheckedCreateWithoutAboutCardsInput>
  }

  export type UserUpdateWithoutAboutCardsInput = {
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    photoURL?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    socialLinks?: SocialLinksUpdateManyWithoutUserNestedInput
    projects?: ProjectsUpdateManyWithoutUserNestedInput
    education?: EducationUpdateManyWithoutUserNestedInput
    experience?: ExperienceUpdateManyWithoutUserNestedInput
    skills?: SkillsUpdateManyWithoutUserNestedInput
    contactResponses?: ContactFormResponsesUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAboutCardsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    photoURL?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    socialLinks?: SocialLinksUncheckedUpdateManyWithoutUserNestedInput
    projects?: ProjectsUncheckedUpdateManyWithoutUserNestedInput
    education?: EducationUncheckedUpdateManyWithoutUserNestedInput
    experience?: ExperienceUncheckedUpdateManyWithoutUserNestedInput
    skills?: SkillsUncheckedUpdateManyWithoutUserNestedInput
    contactResponses?: ContactFormResponsesUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutSkillsInput = {
    email: string
    username: string
    name?: string | null
    password: string
    address?: string | null
    photoURL?: string | null
    gender?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    shortDesc?: string | null
    about?: string | null
    phone?: string | null
    socialLinks?: SocialLinksCreateNestedManyWithoutUserInput
    projects?: ProjectsCreateNestedManyWithoutUserInput
    education?: EducationCreateNestedManyWithoutUserInput
    experience?: ExperienceCreateNestedManyWithoutUserInput
    aboutCards?: AboutCreateNestedManyWithoutUserInput
    contactResponses?: ContactFormResponsesCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSkillsInput = {
    id?: number
    email: string
    username: string
    name?: string | null
    password: string
    address?: string | null
    photoURL?: string | null
    gender?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    shortDesc?: string | null
    about?: string | null
    phone?: string | null
    socialLinks?: SocialLinksUncheckedCreateNestedManyWithoutUserInput
    projects?: ProjectsUncheckedCreateNestedManyWithoutUserInput
    education?: EducationUncheckedCreateNestedManyWithoutUserInput
    experience?: ExperienceUncheckedCreateNestedManyWithoutUserInput
    aboutCards?: AboutUncheckedCreateNestedManyWithoutUserInput
    contactResponses?: ContactFormResponsesUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSkillsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSkillsInput, UserUncheckedCreateWithoutSkillsInput>
  }

  export type UserUpsertWithoutSkillsInput = {
    update: XOR<UserUpdateWithoutSkillsInput, UserUncheckedUpdateWithoutSkillsInput>
    create: XOR<UserCreateWithoutSkillsInput, UserUncheckedCreateWithoutSkillsInput>
  }

  export type UserUpdateWithoutSkillsInput = {
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    photoURL?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    socialLinks?: SocialLinksUpdateManyWithoutUserNestedInput
    projects?: ProjectsUpdateManyWithoutUserNestedInput
    education?: EducationUpdateManyWithoutUserNestedInput
    experience?: ExperienceUpdateManyWithoutUserNestedInput
    aboutCards?: AboutUpdateManyWithoutUserNestedInput
    contactResponses?: ContactFormResponsesUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSkillsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    photoURL?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    socialLinks?: SocialLinksUncheckedUpdateManyWithoutUserNestedInput
    projects?: ProjectsUncheckedUpdateManyWithoutUserNestedInput
    education?: EducationUncheckedUpdateManyWithoutUserNestedInput
    experience?: ExperienceUncheckedUpdateManyWithoutUserNestedInput
    aboutCards?: AboutUncheckedUpdateManyWithoutUserNestedInput
    contactResponses?: ContactFormResponsesUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutContactResponsesInput = {
    email: string
    username: string
    name?: string | null
    password: string
    address?: string | null
    photoURL?: string | null
    gender?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    shortDesc?: string | null
    about?: string | null
    phone?: string | null
    socialLinks?: SocialLinksCreateNestedManyWithoutUserInput
    projects?: ProjectsCreateNestedManyWithoutUserInput
    education?: EducationCreateNestedManyWithoutUserInput
    experience?: ExperienceCreateNestedManyWithoutUserInput
    aboutCards?: AboutCreateNestedManyWithoutUserInput
    skills?: SkillsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutContactResponsesInput = {
    id?: number
    email: string
    username: string
    name?: string | null
    password: string
    address?: string | null
    photoURL?: string | null
    gender?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    shortDesc?: string | null
    about?: string | null
    phone?: string | null
    socialLinks?: SocialLinksUncheckedCreateNestedManyWithoutUserInput
    projects?: ProjectsUncheckedCreateNestedManyWithoutUserInput
    education?: EducationUncheckedCreateNestedManyWithoutUserInput
    experience?: ExperienceUncheckedCreateNestedManyWithoutUserInput
    aboutCards?: AboutUncheckedCreateNestedManyWithoutUserInput
    skills?: SkillsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutContactResponsesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutContactResponsesInput, UserUncheckedCreateWithoutContactResponsesInput>
  }

  export type UserUpsertWithoutContactResponsesInput = {
    update: XOR<UserUpdateWithoutContactResponsesInput, UserUncheckedUpdateWithoutContactResponsesInput>
    create: XOR<UserCreateWithoutContactResponsesInput, UserUncheckedCreateWithoutContactResponsesInput>
  }

  export type UserUpdateWithoutContactResponsesInput = {
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    photoURL?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    socialLinks?: SocialLinksUpdateManyWithoutUserNestedInput
    projects?: ProjectsUpdateManyWithoutUserNestedInput
    education?: EducationUpdateManyWithoutUserNestedInput
    experience?: ExperienceUpdateManyWithoutUserNestedInput
    aboutCards?: AboutUpdateManyWithoutUserNestedInput
    skills?: SkillsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutContactResponsesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    photoURL?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    socialLinks?: SocialLinksUncheckedUpdateManyWithoutUserNestedInput
    projects?: ProjectsUncheckedUpdateManyWithoutUserNestedInput
    education?: EducationUncheckedUpdateManyWithoutUserNestedInput
    experience?: ExperienceUncheckedUpdateManyWithoutUserNestedInput
    aboutCards?: AboutUncheckedUpdateManyWithoutUserNestedInput
    skills?: SkillsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SocialLinksCreateManyUserInput = {
    id?: number
    linkName: string
    url: string
  }

  export type ProjectsCreateManyUserInput = {
    id?: number
    name: string
    description: string
    liveLink: string
    github: string
    category: string
    date: Date | string
    thumbnail: string
    techUsed?: ProjectsCreatetechUsedInput | Enumerable<string>
  }

  export type EducationCreateManyUserInput = {
    id?: number
    priority: number
    from: string
    to: string
    institution: string
    description: string
    percentage: string
  }

  export type ExperienceCreateManyUserInput = {
    id?: number
    role: string
    company: string
    from: string
    to: string
    priority: number
    description: string
  }

  export type AboutCreateManyUserInput = {
    id?: number
    title: string
    description: string
  }

  export type SkillsCreateManyUserInput = {
    id?: number
    title: string
    percentage: string
  }

  export type ContactFormResponsesCreateManyUserInput = {
    id?: number
    senderName: string
    senderMail: string
    message: string
    date?: Date | string
  }

  export type SocialLinksUpdateWithoutUserInput = {
    linkName?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type SocialLinksUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    linkName?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type SocialLinksUncheckedUpdateManyWithoutSocialLinksInput = {
    id?: IntFieldUpdateOperationsInput | number
    linkName?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectsUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    liveLink?: StringFieldUpdateOperationsInput | string
    github?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    techUsed?: ProjectsUpdatetechUsedInput | Enumerable<string>
  }

  export type ProjectsUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    liveLink?: StringFieldUpdateOperationsInput | string
    github?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    techUsed?: ProjectsUpdatetechUsedInput | Enumerable<string>
  }

  export type ProjectsUncheckedUpdateManyWithoutProjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    liveLink?: StringFieldUpdateOperationsInput | string
    github?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    techUsed?: ProjectsUpdatetechUsedInput | Enumerable<string>
  }

  export type EducationUpdateWithoutUserInput = {
    priority?: IntFieldUpdateOperationsInput | number
    from?: StringFieldUpdateOperationsInput | string
    to?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    percentage?: StringFieldUpdateOperationsInput | string
  }

  export type EducationUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    priority?: IntFieldUpdateOperationsInput | number
    from?: StringFieldUpdateOperationsInput | string
    to?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    percentage?: StringFieldUpdateOperationsInput | string
  }

  export type EducationUncheckedUpdateManyWithoutEducationInput = {
    id?: IntFieldUpdateOperationsInput | number
    priority?: IntFieldUpdateOperationsInput | number
    from?: StringFieldUpdateOperationsInput | string
    to?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    percentage?: StringFieldUpdateOperationsInput | string
  }

  export type ExperienceUpdateWithoutUserInput = {
    role?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    from?: StringFieldUpdateOperationsInput | string
    to?: StringFieldUpdateOperationsInput | string
    priority?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
  }

  export type ExperienceUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    from?: StringFieldUpdateOperationsInput | string
    to?: StringFieldUpdateOperationsInput | string
    priority?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
  }

  export type ExperienceUncheckedUpdateManyWithoutExperienceInput = {
    id?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    from?: StringFieldUpdateOperationsInput | string
    to?: StringFieldUpdateOperationsInput | string
    priority?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
  }

  export type AboutUpdateWithoutUserInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type AboutUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type AboutUncheckedUpdateManyWithoutAboutCardsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type SkillsUpdateWithoutUserInput = {
    title?: StringFieldUpdateOperationsInput | string
    percentage?: StringFieldUpdateOperationsInput | string
  }

  export type SkillsUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    percentage?: StringFieldUpdateOperationsInput | string
  }

  export type SkillsUncheckedUpdateManyWithoutSkillsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    percentage?: StringFieldUpdateOperationsInput | string
  }

  export type ContactFormResponsesUpdateWithoutUserInput = {
    senderName?: StringFieldUpdateOperationsInput | string
    senderMail?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContactFormResponsesUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    senderName?: StringFieldUpdateOperationsInput | string
    senderMail?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContactFormResponsesUncheckedUpdateManyWithoutContactResponsesInput = {
    id?: IntFieldUpdateOperationsInput | number
    senderName?: StringFieldUpdateOperationsInput | string
    senderMail?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}